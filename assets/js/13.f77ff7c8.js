(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{276:function(e,n,t){"use strict";t.r(n);var r=t(19),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[e._v("#")]),e._v(" Queue")]),e._v(" "),t("p",[t("em",[e._v("written by sohyeon")]),e._v("🍀")]),e._v(" "),t("br"),e._v(" "),t("h2",{attrs:{id:"_1-queue-자료-구조의-개념"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-queue-자료-구조의-개념"}},[e._v("#")]),e._v(" 1. Queue 자료 구조의 개념")]),e._v(" "),t("h3",{attrs:{id:"queue의-특성"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue의-특성"}},[e._v("#")]),e._v(" Queue의 특성")]),e._v(" "),t("ol",[t("li",[e._v("삽입, 삭제의 위치가 제한적인 자료구조")])]),e._v(" "),t("ul",[t("li",[e._v("큐 뒤: 삽입 / 큐 앞: 삭제")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("선입선출구조(FIFO: First In First Out)")])]),e._v(" "),t("ul",[t("li",[e._v("큐에 삽입한 순서대로 원소가 저장")]),e._v(" "),t("li",[e._v("가장 먼저 삽입(First In)된 원소는 가장 먼저 삭제(First Out)됨")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("큐의 예: 서비스 대기 행렬")])]),e._v(" "),t("h3",{attrs:{id:"queue의-구조-선입-선출-구조"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue의-구조-선입-선출-구조"}},[e._v("#")]),e._v(" Queue의 구조(선입 선출 구조)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-----------------------------\n삭제 <=                     => 삽입\n-----------------------------\n머리(Front): 저장된 원소 중 첫 번째 원소\n꼬리(Rear): 저장된 원소 중 마지막 번째 원소\n\n기본 연산은 삽입(enQueue)과 삭제(deQueue)가 있다. \n")])])]),t("h3",{attrs:{id:"queue의-주요-연산"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue의-주요-연산"}},[e._v("#")]),e._v(" Queue의 주요 연산")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[e._v("연산")]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[e._v("기능")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("enQueue(item)")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("큐의 뒤쪽(rear 다음)에 원소를 삽입하는 연산")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("deQueue()")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("큐의 앞쪽(front)에서 원소를 삭제하고 반환하는 연산")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("createQueue()")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("공백 상태의 큐를 생성하는 연산")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("isEmpty()")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("큐가 공백 상태인지를 확인하는 연산")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("isFull()")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("큐가 포화 상태인지를 확인하는 연산")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[e._v("Qpeek()")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("큐의 앞쪽(front)에서 원소를 삭제 없이 반환하는 연산")])])])]),e._v(" "),t("h3",{attrs:{id:"queue의-연산-과정"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue의-연산-과정"}},[e._v("#")]),e._v(" Queue의 연산 과정")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1. 공백 큐 생성: createQueue();\n0     1     2     3\n----------------------------\n\n----------------------------\nfront = rear = -1\n\n2. 원소 A 삽입: enQueue(A);\n0     1     2     3\n----------------------------\nA\n----------------------------\nfront = -1, rear = 0\n\n3. 원소 B 삽입: enQueue(B);\n0     1     2     3\n----------------------------\nA     B\n----------------------------\nfront = -1, rear = 1\n\n4. 원소 반환/삭제: deQueue();\n0     1     2     3\n----------------------------\nB\n----------------------------\nfront = 0, rear = 1\n\n5. 원소 C 삽입: enQueue(C);\n0     1     2     3\n----------------------------\nB     C\n----------------------------\nfront = 0, rear = 2\n\n6. 원소 반환/삭제: deQueue();\n0     1     2     3\n----------------------------\nC\n----------------------------\nfront = 1, rear = 2\n\n7. 원소 반환/삭제: deQueue();\n0     1     2     3\n----------------------------\n\n----------------------------\nfront = 2, rear = 2\n")])])]),t("h3",{attrs:{id:"queue의-종류"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue의-종류"}},[e._v("#")]),e._v(" Queue의 종류")]),e._v(" "),t("ul",[t("li",[e._v("선형 큐\n"),t("ul",[t("li",[e._v("간단하고 기본적인 형태")]),e._v(" "),t("li",[t("code",[e._v("리스트 사용")])])])]),e._v(" "),t("li",[e._v("원형 큐\n"),t("ul",[t("li",[e._v("선형에서 발전된 형태")]),e._v(" "),t("li",[t("code",[e._v("리스트 사용")])])])]),e._v(" "),t("li",[e._v("연결 큐\n"),t("ul",[t("li",[t("code",[e._v("연결 리스트 형식을 이용")])])])]),e._v(" "),t("li",[e._v("우선순위 큐\n"),t("ul",[t("li",[e._v("연결 큐를 응용한 큐의 형태")])])])]),e._v(" "),t("br"),e._v(" "),t("h2",{attrs:{id:"_2-queue의-종류"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-queue의-종류"}},[e._v("#")]),e._v(" 2. Queue의 종류")]),e._v(" "),t("h3",{attrs:{id:"선형-queue의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#선형-queue의-특징"}},[e._v("#")]),e._v(" 선형 Queue의 특징")]),e._v(" "),t("ol",[t("li",[e._v("1차원 리스트를 이용한 큐")])]),e._v(" "),t("ul",[t("li",[e._v("큐의 크기 = 리스트의 크기")]),e._v(" "),t("li",[e._v("front: 저장된 첫 번째 원소의 인덱스")]),e._v(" "),t("li",[e._v("rear: 저장된 마지막 원소의 인덱스")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("상태 표현")])]),e._v(" "),t("ul",[t("li",[e._v("초기 상태: front = rear = -1")]),e._v(" "),t("li",[e._v("공백 상태: front = rear")]),e._v(" "),t("li",[e._v("포화 상태: rear = n-1(n: 리스트의 크기, n-1: 리스트의 마지막 인덱스)")])]),e._v(" "),t("h3",{attrs:{id:"선형-queue의-구현"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#선형-queue의-구현"}},[e._v("#")]),e._v(" 선형 Queue의 구현")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('1. 초기 createQueue()\n초기 공백 큐 생성\n    - 크기 n인 1차원 리스트 생성\n    - front, rear = -1로 초기화\n\n2. enQueue(item)\n삽입: enQueue(item)\n마지막 원소 뒤에 새로운 원소를 삽입하기 위해\n    1. rear 값을 하나 증가시켜 새로운 원소를 삽입할 자리를 마련함\n    2. 그 인덱스에 해당하는 리스트 원소 Q[rear]에 item을 저장\n\nex) 선형 큐 삽입 예제\ndef enQueue(item):\n    global rear\n    if isFull() : \n        print("Queue_Full")\n    else:\n        rear +=1\n        Q[rear] = item\n\n3. deQueue()\n삭제: deQueue()\n가장 앞에 있는 원소를 삭제하기 위해\n    1. front 값을 하나 증가시켜 큐에 남아있는 첫 번째 원소로 이동함\n    2. 새로운 첫 번째 원소를 리턴함으로써 삭제와 동일한 기능을 함    \n\nex) 선형 큐 삭제 예제\ndef deQueue():\n    global front\n    if isEmpty():\n        print("Queue_Empty")\n    else:\n        front += 1\n        return Q[front]\n\n4. isEmpty(), isFull()\n공백상태 및 포화상태 검사: isEmpty(), isFull()\n    - 공백상태: front = rear\n    - 포화상태: rear = n-1(n: 리스트의 크기, n-1: 리스트의 마지막 인덱스)\n\nex) 선형 큐 공백상태 및 포화상태 검사 예제\ndef isEmpty()\n    return front == rear\n\ndef isFull():\n    return rear == len(Q)-1\n\n5. Qpeek()\n검색: Qpeek()\n    - 가장 앞에 있는 원소를 검색하여 반환하는 연산\n    - 현재 front의 한자리 뒤(front+1)에 있는 원소, 즉 큐의 첫 번째에 있는 원소를 반환\n\nex) 선형 큐 검색 예제\ndef Qpeek():\n    if isEmpty():\n        print("Queue_Empty")\n    else:\n        return Q[front+1]\n')])])]),t("h3",{attrs:{id:"선형-queue의-문제점-잘못된-포화-상태-인식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#선형-queue의-문제점-잘못된-포화-상태-인식"}},[e._v("#")]),e._v(" 선형 Queue의 문제점 : 잘못된 포화 상태 인식")]),e._v(" "),t("ul",[t("li",[e._v("리스트의 크기를 고정 => 사용할 큐의 크기만큼을 미리 확보 => 메모리의 낭비 발생\n"),t("ul",[t("li",[e._v("삽입, 삭제를 계속할 경우 리스트의 앞부분에 활용할 수 있는 공간이 있음에도, rear=n-1인 상태 즉, "),t("code",[e._v("포화 상태로 인식")])]),e._v(" "),t("li",[e._v("더 이상의 삽입을 수행할 수 없음")])])])]),e._v(" "),t("h3",{attrs:{id:"선형-queue의-장-단점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#선형-queue의-장-단점"}},[e._v("#")]),e._v(" 선형 Queue의 장, 단점")]),e._v(" "),t("ul",[t("li",[e._v("장점 : 삽입, 삭제의 처리 속도 빠름")]),e._v(" "),t("li",[e._v("단점 : 메모리 낭비가 심함")])]),e._v(" "),t("h3",{attrs:{id:"선형-큐의-단점-해결-방법"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#선형-큐의-단점-해결-방법"}},[e._v("#")]),e._v(" 선형 큐의 단점 해결 방법")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("원형 큐 사용")]),e._v("으로 메모리 절약")]),e._v(" "),t("li",[e._v("파이썬의 리스트 특성을 사용한 큐 사용으로 메모리 절약\n"),t("ul",[t("li",[e._v("단점 : 삽입, 삭제 시 복사, 데이터 이동시키는 연산 수행에 많은 시간 소모")])])]),e._v(" "),t("li",[t("code",[e._v("단순 연결 리스트")]),e._v("로 구현한 큐 사용으로 메모리 동적 확보")]),e._v(" "),t("li",[e._v("큐 라이브러리 사용")])]),e._v(" "),t("h3",{attrs:{id:"원형-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#원형-queue"}},[e._v("#")]),e._v(" 원형 Queue")]),e._v(" "),t("ul",[t("li",[e._v("1차원 리스트를 사용하되, 논리적으로 리스트의 처음과 끝이 연결되어 원형 형태의 큐를 이룬다고 가정하고 사용함")]),e._v(" "),t("li",[e._v("원형 큐의 논리적 구조")])]),e._v(" "),t("h3",{attrs:{id:"원형-queue의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#원형-queue의-특징"}},[e._v("#")]),e._v(" 원형 Queue의 특징")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1. 초기 공백 상태\n- front = rear = 0\n\n2. Index의 순환\n- front와 rear의 위치가 리스트의 마지막 인덱스인 n-1를 가리킨 후, 논리적 순환을 이루어 리스트의 처음\n인덱스인 0으로 이동해야 함\n- 이를 위해 나머지 연산자 %를 사용\n\n3. front 변수\n- 공백 상태와 포화 상태 구분을 쉽게 하기 위해 front가 있는 자리는 사용하지 않고 항상 빈자리로 둠\n\n4. 삽입 위치 및 삭제 위치\n-------------------------------------------------\n 테이블 인덱스 |     삽입 위치     |      삭제 위치 \n-------------------------------------------------\n   선형 큐   |   rear=rear+1   |   front=front+1\n-------------------------------------------------\n   원형 큐   | rear=(rear+1)%n | front=(front+1)%n\n-------------------------------------------------\n")])])]),t("h3",{attrs:{id:"원형-queue의-구현"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#원형-queue의-구현"}},[e._v("#")]),e._v(" 원형 Queue의 구현")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('1. 초기 createQueue()\n초기 공백 큐 생성\n    - 크기 n인 1차원 리스트 생성\n    - front, rear = 0으로 초기화\n\n2. isEmpty(), isFull()\n공백상태 및 포화상태 검사: isEmpty(), isFull()\n    - 공백상태: front = rear\n    - 포화상태: 삽입할 rear의 다음 위치 = 현재 front\n    - (rear+1)%n = front\n\nex) 원형 큐 공백상태 및 포화상태 검사 예제\ndef isEmpty():\n    return front == rear\n\ndef isFull():\n    return (rear+1)%len(cQ) == front\n\n3. enQueue(item)\n삽입: enQueue(item)\n마지막 원소 뒤에 새로운 원소를 삽입하기 위해\n    - rear 값을 조정하여 새로운 원소를 삽입할 자리를 마련함: rear <- (rear+1) % n;\n    - 인덱스에 해당하는 리스트원소 cQ[rear]에 item을 저장\n\nex) 원형 큐 삽입 예제\ndef enQueue(item):\n    global rear\n    if isFull():\n        print("Queue_Full")\n    else:\n        rear = (rear + 1) % len(cQ)\n        cQ[rear] = item\n\n4. deQueue()\n삭제: deQueue(), delete()\n가장 앞에 있는 원소를 삭제하기 위해\n    - front 값을 조정하여 삭제할 자리를 준비함\n    - 새로운 front 원소를 리턴함으로써 삭제와 동일한 기능을 함\n\nex) 원형 큐 삭제 예제\ndef deQueue():\n    global front\n    if isEmpty():\n        print("Queue_Empty")\n    else:\n        front = (front + 1) % len(cQ)\n        return cQ[front]\n\ndef delete():\n    global front\n    if isEmpty():\n        print("Queue_Empty")\n    else:\n        front = (front + 1) % len(CQ)\n')])])]),t("h3",{attrs:{id:"리스트의-특성을-사용한-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#리스트의-특성을-사용한-queue"}},[e._v("#")]),e._v(" 리스트의 특성을 사용한 Queue")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1. 라이썬의 리스트 특성을 사용한 큐\n    - 리스트는 크기를 동적으로 변경할 수 있음\n    - 메모리 절약\n    - 삽입, 삭제 시 복사, 데이터를 이동시키는 연산을 수행하는데 많은 시간 소모\n\n2. 리스트의 메서드\n------------------------------------\n    메서드     |         설명\n------------------------------------\nappend(item) | 마지막 위치에 원소 추가\n------------------------------------\npop(index)   | index 위치에 원소 삭제\n------------------------------------\n\n3. front는 리스트의 맨 앞: -1\n\n4. rear는 리스트의 맨 뒤: len(queue)-1\n")])])]),t("h4",{attrs:{id:"파이썬으로-구현한-원형-큐의-삽입-및-삭제-함수-예제"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#파이썬으로-구현한-원형-큐의-삽입-및-삭제-함수-예제"}},[e._v("#")]),e._v(" 파이썬으로 구현한 원형 큐의 삽입 및 삭제 함수 예제")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("def enQueue(item):\n    queue.append(item)\n\ndef deQueue():\n    if isEmpty():\n        print(\"Queue_Empty\")\n    else:\n        return queue.pop(0)\n\ndef isEmpty():\n    return len(queue)==0\n\ndef Qpeek():\n    if isEmpty():\n        print(\"Queue_Empty\")\n    else:\n        return queue[0]\n\nqueue = [] # 공백 리스트 생성\n# front : -1\n# rear : len(queue)-1\n\nenQueue('A')\nenQueue('B')\nenQueue('C')\nprint(deQueue())\nprint(deQueue())\nprint(deQueue())\n")])])]),t("h3",{attrs:{id:"연결-queue의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#연결-queue의-특징"}},[e._v("#")]),e._v(" 연결 Queue의 특징")]),e._v(" "),t("ol",[t("li",[e._v("단순 연결 리스트(Linked List)를 이용한 큐")])]),e._v(" "),t("ul",[t("li",[e._v("큐의 원소: 단순 연결 리스트의 노드")]),e._v(" "),t("li",[e._v("큐의 원소 순서: 노드의 연결 순서, 링크로 연결되어 있음")]),e._v(" "),t("li",[e._v("front: 첫 번째 노드를 가리키는 링크")]),e._v(" "),t("li",[e._v("rear: 마지막 노드를 가리키는 링크")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("상태 표현")])]),e._v(" "),t("ul",[t("li",[e._v("초기 상태: front = rear = None")]),e._v(" "),t("li",[e._v("공백 상태: front = rear = None")]),e._v(" "),t("li",[e._v("노드를 계속 추가할 수 있는 연결 리스트 특성으로 연결 큐에는 포화상태가 없음")])]),e._v(" "),t("p",[e._v("연결 Queue의 구현")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('1. createLinkedQueue()\n초기 공백 큐 생성: createLinkedQueue()\n    - 리스트 노드 없이 포인터 변수만 생성함\n    - front와 rear를 None로 초기화\n\nex) 연결 큐의 초기 공백 큐 생성 예제\nfront = None\nrear = None\n\n2. isEmpty()\n공백상태 검사: isEmpty()\n    - 공백상태: front = rear = None\n\nex) 연결 큐의 공백상태 검사 예제\ndef isEmpty():\n    return front == None\n\n3. enQueue(item)\n삽입: enQueue(item)\n    1. 새로운 노드 생성 후 데이터 필드에 item 저장\n    2. 연결 큐가 공백인 경우, 아닌 경우에 따라 front, rear 변수 지정\n\nex) 연결 큐의 삽입 예제\ndef enQueue(item):       # 연결 큐의 삽입 연산\n    global front, rear\n    newNode = Node(item)   # 새로운 노드 생성\n    if isEmpty():          # 큐가 비어있다면\n        front = newNode\n    else:\n        rear.next = newNode\n    rear = newNode\n\n4. deQueue()\n삭제: deQueue()\n    1. old가 지울 노드를 가리키게 하고, front 재설정\n    2. 삭제 후 공백 큐가 되는 경우, rear도 None로 설정\n    3. old가 가리키는 노드를 삭제하고 메모리 반환\n\nex) 연결 큐의 삭제 예제\ndef deQueue():   # 연결 큐의 삭제 연산\n    global front, rear\n    if isEmpty():\n        print("Queue_Empty")\n\n    item = front.item\n    front = front.next\n    if isEmpty():\n        rear = None\n    return item\n')])])]),t("h4",{attrs:{id:"파이썬으로-구현한-연결-queue-예제"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#파이썬으로-구현한-연결-queue-예제"}},[e._v("#")]),e._v(" 파이썬으로 구현한 연결 Queue 예제")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Node:\n    def __init__(self, item, n=None):\n        self.item = item\n        self.next = n\n\ndef enQueue(item):       # 연결 큐의 삽입 연산\n    global front, rear\n    newNode = Node(item)   # 새로운 노드 생성\n    if front == None:      # 큐가 비어있다면\n        front = newNode\n    else:\n        rear.next = newNode\n    rear = newNode\n\ndef isEmpty():\n    return front == None\n\ndef deQueue():   # 연결 큐의 삭제 연산\n    global front, rear\n    if isEmpty():\n        print(\"Queue_Empty\")\n\n    item = front.item\n    front = front.next\n    if isEmpty():\n        rear = None\n    return item\n    \ndef Qpeek():\n    return front.item\n\ndef printQ():\n    f = front\n    s = \"\"\n    while f:\n        s += f.item + \" \"\n        f = f.next\n    return s\n\nfront = None\nrear = None\n\nenQueue('A')\nenQueue('B')\nenQueue('C')\nprintQ()\nprint(deQueue())\nprint(deQueue())\nprint(deQueue())\n")])])]),t("h3",{attrs:{id:"큐-라이브러리-큐-모듈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#큐-라이브러리-큐-모듈"}},[e._v("#")]),e._v(" 큐 라이브러리(큐 모듈)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1. 큐 모듈에 정의된 클래스\n------------------------------------------------------------------------------------\n클래스                         |  내용\n------------------------------------------------------------------------------------\nqueue.Queue(maxsize)         | 마지막 위치에 원소 추가\n------------------------------------------------------------------------------------\nqueue.LifoQueue(maxsize)     | index 위치에 원소 삭제\n------------------------------------------------------------------------------------\nqueue.PriorityQueue(maxsize) | 우선순위 큐 객체를 생성, 입력되는 아이템의 형식은 (순위, 아이템)의\n| 튜플로 입력되며, 우선순위는 숫자가 작을수록 높은 순위를 가짐\n------------------------------------------------------------------------------------\n\n2. maxsize는 최대 아이템수, 지정하지 않거나 음수이면 내용만큼 늘어남 \n\n3. 제시된 3개의 클래스는 다음과 같은 메서드를 동일하게 가짐\n-----------------------------------------------------------------------\n메서드                         |  내용\n-----------------------------------------------------------------------\nqsize()                       | 큐 객체에 입력된 아이템의 개수를 반환\n-----------------------------------------------------------------------\nput(item[, block[, timeout]]) | 큐 객체에 아이템을 입력\n-----------------------------------------------------------------------\nget([block[, timeout]])       | 생성된 큐 객체 특성에 맞추어, 아이템 1개를 반환\n-----------------------------------------------------------------------\nempty()                       | 큐 객체가 비어있으면 True 리턴\n-----------------------------------------------------------------------\nfull()                        | 큐 객체가 꽉차있으면 True 리턴\n-----------------------------------------------------------------------\n\n4. 클래스의 정렬방식에 따라 get 계열의 메서드 결과가 달라짐                       \n")])])]),t("h4",{attrs:{id:"큐-모듈-활용-예제"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#큐-모듈-활용-예제"}},[e._v("#")]),e._v(" 큐 모듈 활용 예제")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 선입선출의 큐 개념을 구현한 큐 클래스 활용\nimport queue\n\nq = queue.Queue()   # FIFO 구조 큐 생성\nq.put('A')\nq.put('B')\nq.put('C')\n\nwhile not q.empty():\n    print(q.get())\n")])])]),t("br"),e._v(" "),t("h2",{attrs:{id:"_3-queue의-활용"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-queue의-활용"}},[e._v("#")]),e._v(" 3. Queue의 활용")]),e._v(" "),t("h3",{attrs:{id:"우선순위-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#우선순위-queue"}},[e._v("#")]),e._v(" 우선순위 Queue")]),e._v(" "),t("ul",[t("li",[e._v("우선순위를 가진 항목들을 저장하는 큐")]),e._v(" "),t("li",[e._v("FIFO 순서가 아니라 "),t("strong",[e._v("우선순위가 높은 순서대로")]),e._v(" 먼저 나가게 됨")]),e._v(" "),t("li",[e._v("우선순위 큐의 적용 분야는 "),t("code",[e._v("시뮬레이션 시스템")]),e._v(", "),t("code",[e._v("네트워크 트래픽 제어")]),e._v(", "),t("code",[e._v("운영체제의 태스크 스케줄링")]),e._v("이 있다.")])]),e._v(" "),t("h3",{attrs:{id:"리스트를-이용한-우선순위-큐의-구현"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#리스트를-이용한-우선순위-큐의-구현"}},[e._v("#")]),e._v(" 리스트를 이용한 우선순위 큐의 구현")]),e._v(" "),t("ol",[t("li",[e._v("리스트를 이용하여 자료 저장")]),e._v(" "),t("li",[e._v("원소를 삽입하는 과정에서 우선순위를 비교하여 적절한 위치에 삽입하는 구조")]),e._v(" "),t("li",[e._v("가장 앞에 최고 우선순위의 원소가 위치하게 됨")])]),e._v(" "),t("h4",{attrs:{id:"우선순위-큐의-문제점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#우선순위-큐의-문제점"}},[e._v("#")]),e._v(" 우선순위 큐의 문제점")]),e._v(" "),t("ul",[t("li",[e._v("리스트를 사용하므로, 삽입이나 삭제 연산이 일어날 때 원소의 재배치가 발생")]),e._v(" "),t("li",[e._v("소요되는 시간이 많이 걸림")])]),e._v(" "),t("h4",{attrs:{id:"우선순위-큐의-solution-해결책"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#우선순위-큐의-solution-해결책"}},[e._v("#")]),e._v(" 우선순위 큐의 Solution(해결책)")]),e._v(" "),t("ul",[t("li",[e._v("PriorityQueue(maxsize) 클래스 사용")]),e._v(" "),t("li",[e._v("힙 자료구조 사용")])]),e._v(" "),t("h3",{attrs:{id:"버퍼란"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#버퍼란"}},[e._v("#")]),e._v(" 버퍼란?")]),e._v(" "),t("ul",[t("li",[e._v("데이터를 한 곳에서 다른 한 곳으로 전송하는 동안 일시적으로 그 데이터를 보관하는 메모리의 영역")]),e._v(" "),t("li",[e._v("버퍼링: 버퍼를 활용하는 방식 또는 버퍼를 채우는 동작을 의미")])]),e._v(" "),t("h3",{attrs:{id:"버퍼의-자료-구조"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#버퍼의-자료-구조"}},[e._v("#")]),e._v(" 버퍼의 자료 구조")]),e._v(" "),t("ul",[t("li",[e._v("일반적으로 입출력 및 네트워크와 관련된 기능에서 이용")]),e._v(" "),t("li",[e._v("순서대로 입력/출력/전달되어야 하므로 FIFO 방식의 자료구조인 "),t("strong",[e._v("큐가 활용")]),e._v("됨")])]),e._v(" "),t("br"),e._v(" "),t("h2",{attrs:{id:"_4-bfs-너비-우선-탐색"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-bfs-너비-우선-탐색"}},[e._v("#")]),e._v(" 4. BFS(너비 우선 탐색)")]),e._v(" "),t("h3",{attrs:{id:"bfs-너비-우선-탐색"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bfs-너비-우선-탐색"}},[e._v("#")]),e._v(" BFS(너비 우선 탐색)")]),e._v(" "),t("ul",[t("li",[e._v("BFS(Breadth First Search, 너비 우선 탐색)")]),e._v(" "),t("li",[t("code",[e._v("큐 활용")])]),e._v(" "),t("li",[e._v("시작점의 인접한 정점들을 모두 차례로  방문한 후 모두 차례로 방문한 후 방문했던 정점을 시작점으로 하여 다시 인접한 장점들을 차례로 방문하는 방식")]),e._v(" "),t("li",[e._v("인접한 정점들을 탐색한 후, 차례로 너비 우선 탐색을 진행해야 하므로, 선입선출 형태의 자료구조인 큐 활용")])]),e._v(" "),t("h4",{attrs:{id:"입력-파라미터-그래프-g와-탐색-시작점-v"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#입력-파라미터-그래프-g와-탐색-시작점-v"}},[e._v("#")]),e._v(" 입력 파라미터: 그래프 G와 탐색 시작점 v")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("def BFS(G,v):            # 그래프 G, 탐색 시작점 v\n    visited = [0]*n        # n : 정점의 개수\n    queue = []             # 큐 생성\n    queue.append(v)        # 시작점 v를 큐에 삽입\n    while queue:           # 큐가 비어있지 않은 경우\n        t = queue.pop(0)     # 큐의 첫번째 원소 반환 \n        if not visited[t]:   # 방문되지 않은 곳이라면\n            visited[t] = True  # 방문한 것으로 표시\n            visit(t)\n        for i in G[t]:       # t와 연결된 모든 선에 대해\n            if not visited[i]: # 방문되지 않은 곳이라면\n                queue.append(i)  # 큐에 넣기\n")])])]),t("br"),e._v(" "),t("h2",{attrs:{id:"reference-additional-resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[e._v("#")]),e._v(" Reference & Additional Resources")]),e._v(" "),t("blockquote",[t("p",[e._v("SW Expert Academy")])])])}),[],!1,null,null,null);n.default=a.exports}}]);