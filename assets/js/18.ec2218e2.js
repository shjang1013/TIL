(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{382:function(a,t,e){"use strict";e.r(t);var r=e(27),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),e("p",[e("em",[a._v("written by sohyeon")]),a._v("🍀")]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"_1-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-string"}},[a._v("#")]),a._v(" 1. String")]),a._v(" "),e("h3",{attrs:{id:"컴퓨터의-문자표현"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#컴퓨터의-문자표현"}},[a._v("#")]),a._v(" 컴퓨터의 문자표현")]),a._v(" "),e("p",[a._v("글자 A를 메모리에 저장하는 방법")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 메모리는 숫자만을 저장할 수 있기 때문에 A라는 글자의 모양 그대로 비트맵으로 저장하는 방법을 사용하지 않는 한 각 문자에 대해서 대응되는 숫자를 정해 놓고 이것을 메모리에 저장하는 방법이 사용될 것\n2. 코드체계\n    => 영어가 대소문자 합쳐서 52이므로 6(64가지)비트면 모두 표현할 수 있음\n")])])]),e("ul",[e("li",[a._v("네트워크가 발전되기 전 미국의 각 지역별로 코드체계를 정해놓고 사용했지만, 네트워크(인터넷 : 인터넷은 미국에서 발전)가 발전하면서 "),e("code",[a._v("서로 간의 정보를 주고 받을 때 정보를 달리 해석한다")]),a._v("는 문제가 생기게 됨")])]),a._v(" "),e("h3",{attrs:{id:"아스키-ascii"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#아스키-ascii"}},[a._v("#")]),a._v(" 아스키(ASCII)")]),a._v(" "),e("ul",[e("li",[a._v("문자 인코딩 표준")]),a._v(" "),e("li",[a._v("7bit 인코딩으로 128문자를 표현하며 33개의 출력 불가능한 제어 문자들과 공백을 비롯한 95개의 출력 가능한 문자들로 이루어져 있음")])]),a._v(" "),e("h4",{attrs:{id:"확장-아스키"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#확장-아스키"}},[a._v("#")]),a._v(" 확장 아스키")]),a._v(" "),e("ul",[e("li",[a._v("표준 문자 이외의 악센트 문자, 도형 문자, 특수 문자, 특수 기호 등 "),e("code",[a._v("부가적인 문자를 128개 추가")]),a._v("할 수 있게 하는 부호")]),a._v(" "),e("li",[e("code",[a._v("1Byte 내의 8bit를 모두 사용")]),a._v("함으로써 추가적인 문자를 표현할 수 있음")]),a._v(" "),e("li",[a._v("컴퓨터 생산자와 소프트웨어 개발자에게 할당된 확장 부호는 표준 아스키와 다르게 "),e("code",[a._v("서로 다른 프로그램이나 컴퓨터 사이에 교환되지 못함")])]),a._v(" "),e("li",[e("code",[a._v("프로그램이나 컴퓨터/프린트가 그것을 해독할 수 있도록 설계")]),a._v("되어 있어야만 올바로 해독될 수 있음")])]),a._v(" "),e("h3",{attrs:{id:"유니코드"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#유니코드"}},[a._v("#")]),a._v(" 유니코드")]),a._v(" "),e("p",[a._v("다국어 처리를 위한 표준")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("대부분의 컴퓨터는 문자를 읽고 쓰는데, "),e("code",[a._v("아스키 코드")]),a._v(" 형식을 사용")])]),a._v(" "),e("li",[e("p",[a._v("컴퓨터가 발전하면서 각 국가들은 자국의 문자를 표현하기 위하여 "),e("code",[a._v("코드체계")]),a._v("를 만들어서 사용")])]),a._v(" "),e("li",[e("p",[a._v("우리나라도 한글 코드체계를 만들어 사용했고, 조합형, 완성형 두 종류를 가지고 있었음")])]),a._v(" "),e("li",[e("p",[a._v("인터넷이 전 세계로 발전하면서 아스키를 만들었을 때와 같은 문제가 국가 간에 정보를 주고 받을 때 발생")])]),a._v(" "),e("li",[e("p",[a._v("자국의 코드체계를 타 국가가 가지고 있지 않으면 정보를 잘못 해석할 수 밖에 없음"),e("br"),a._v("\n따라서, 다국어 처리를 위해 표준을 마련함 => "),e("code",[a._v("유니코드")])])])]),a._v(" "),e("h3",{attrs:{id:"character-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#character-set"}},[a._v("#")]),a._v(" Character Set")]),a._v(" "),e("ul",[e("li",[a._v("UCS-2(Universal Character Set 2), UCS-4(Universal Character Set 4)")]),a._v(" "),e("li",[e("code",[a._v("유니코드를 저장하는 변수의 크기를 정의")])]),a._v(" "),e("li",[a._v("파일을 인식 시 이 파일이 UCS-2, UCS-4인지 인식하고 각 경우를 구분해서 모드 다르게 구현해야 하는 문제 발생")])]),a._v(" "),e("h3",{attrs:{id:"유니코드-인코딩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#유니코드-인코딩"}},[a._v("#")]),a._v(" 유니코드 인코딩")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("유니코드 인코딩(UTF : Unicode Transformation Format)")])]),a._v(" "),e("li",[a._v("바이트 용량 최솟값에 따라 "),e("code",[a._v("UTF-8(in web)")]),a._v(", "),e("code",[a._v("UTF-16(in windows, Java)")]),a._v(", "),e("code",[a._v("UTF-32(in Unix)")])])]),a._v(" "),e("h3",{attrs:{id:"파이썬-인코딩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#파이썬-인코딩"}},[a._v("#")]),a._v(" 파이썬 인코딩")]),a._v(" "),e("ul",[e("li",[a._v("2.x  버전 : ASCII  => 소스코드에서 한글을 사용할 경우 "),e("code",[a._v("#-*- coding : uft-8 -*-")])]),a._v(" "),e("li",[a._v("3.x 버전 : 유니코드 UTF-8")])]),a._v(" "),e("p",[a._v("다른 인코딩 방식으로 처리 시 첫 줄에 작성하는 위 항목에 원하는 인코딩 방식을 지정해주면 됨")]),a._v(" "),e("h3",{attrs:{id:"문자열의-분류"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#문자열의-분류"}},[a._v("#")]),a._v(" 문자열의 분류")]),a._v(" "),e("p",[a._v("문자열(String)")]),a._v(" "),e("ul",[e("li",[a._v("Fixed length")]),a._v(" "),e("li",[a._v("Variable length(가변길이 문자열)\n"),e("ul",[e("li",[a._v("Length controlled(길이조절 문자열) : 문자데이터 맨 앞에 문자열 크기를 저장하는 형태로, Java 언어에서의 문자열")]),a._v(" "),e("li",[a._v("Delimited(구분자 문자열) : 문자열 마지막에 delimeter를 사용하여 문자열의 길이를 조절하는 형태로, C언어에서의 문자열")])])])]),a._v(" "),e("h3",{attrs:{id:"c언어에서-문자열-처리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c언어에서-문자열-처리"}},[a._v("#")]),a._v(" C언어에서 문자열 처리")]),a._v(" "),e("p",[a._v("문자들의 배열 형태로 구현된 응용 자료형")]),a._v(" "),e("ul",[e("li",[a._v("문자배열에 문자열을 저장할 때는 항상 마지막에 끝을 표시하는 "),e("code",[a._v("널 문자('\\0')")]),a._v("를 넣어줘야 함\n"),e("ul",[e("li",[e("code",[a._v("char array[] = {'a', 'b', 'c', '\\0'}; // 또는 char array[] = \"abc\";")])])])]),a._v(" "),e("li",[a._v("문자열 처리에 필요한 연산을 함수 형태로 제공\n"),e("ul",[e("li",[e("code",[a._v("strlen(), strcpy(), strcmp(), ...")])])])])]),a._v(" "),e("h3",{attrs:{id:"java에서의-문자열-처리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java에서의-문자열-처리"}},[a._v("#")]),a._v(" Java에서의 문자열 처리")]),a._v(" "),e("p",[a._v("문자열 데이터를 저장, 처리해주는 클래스를 제공")]),a._v(" "),e("ul",[e("li",[a._v("String 클래스를 사용\n"),e("ul",[e("li",[e("code",[a._v('String str = "abc"; // 또는 String str = new String("abc");')])])])]),a._v(" "),e("li",[a._v("문자열 처리에 필요한 연산을 연산자, 메소드 형태로 제공\n"),e("ul",[e("li",[e("code",[a._v("+, length(), replace(), split(), substring() 등")])])])])]),a._v(" "),e("h3",{attrs:{id:"파이썬에서의-문자열-처리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#파이썬에서의-문자열-처리"}},[a._v("#")]),a._v(" 파이썬에서의 문자열 처리")]),a._v(" "),e("p",[a._v("char 타입은 없으며, 텍스트 데이터 취급방법이 통일되어 있음")]),a._v(" "),e("ul",[e("li",[a._v("문자열 기호\n"),e("ul",[e("li",[a._v("'(홑따옴표), \"(쌍따옴표), '''(홑따옴표 3개), \"\"\"(쌍따옴표 3개)")]),a._v(" "),e("li",[e("code",[a._v("+ 연결(Concatenation)")]),a._v(" : 문자열 + 문자열(이어 붙여주는 역할)")]),a._v(" "),e("li",[e("code",[a._v("* 반복")]),a._v(" : 문자열 * 수(수만큼 문자열이 반복)")])])]),a._v(" "),e("li",[a._v("문자열은 시퀀스 자료형으로 분류되고, 시퀀스 자료형에서 사용할 수 있는 인덱싱, 슬라이싱 연산들을 사용할 수 있음\n"),e("ul",[e("li",[a._v("문자열 클래스에서 제공되는 메소드 : "),e("code",[a._v("replace(), split(), isalpha(), find()")])])])]),a._v(" "),e("li",[a._v("문자열은 튜플과 같이 요소값을 변경할 수 없음(immutable)")])]),a._v(" "),e("h3",{attrs:{id:"문자열의-비교"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#문자열의-비교"}},[a._v("#")]),a._v(" 문자열의 비교")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. C strcmp() 함수를 제공\n2. Java에서는 equals() 메소드를 제공\n    => 문자열 비교에서 == 연산은 메모리 참조가 같은지를 묻는 것\n3. 파이썬에서는 연산자와 is 연산자를 제공\n    => == 연산자는 내부적으로 특수메서드 __eq__()를 호출\n")])])]),e("h3",{attrs:{id:"문자열로-된-숫자를-정수로-변환하는-방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#문자열로-된-숫자를-정수로-변환하는-방법"}},[a._v("#")]),a._v(" 문자열로 된 숫자를 정수로 변환하는 방법")]),a._v(" "),e("ul",[e("li",[a._v("C언어\n"),e("ul",[e("li",[a._v("atoi() 함수를 제공함")])])]),a._v(" "),e("li",[a._v("Java\n"),e("ul",[e("li",[a._v("숫자 클래스 parse 메소드를 제공함")]),a._v(" "),e("li",[e("code",[a._v("예) Integer.parseInt(String)")])]),a._v(" "),e("li",[a._v("역함수로는 "),e("code",[a._v("toString() 메소드")]),a._v("를 제공함")])])]),a._v(" "),e("li",[a._v("파이썬\n"),e("ul",[e("li",[a._v("숫자와 문자변환 함수를 제공함")]),a._v(" "),e("li",[e("code",[a._v('예) int("123")')])])])])]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"_2-패턴-매칭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-패턴-매칭"}},[a._v("#")]),a._v(" 2. 패턴 매칭")]),a._v(" "),e("h3",{attrs:{id:"패턴-매칭-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#패턴-매칭-알고리즘"}},[a._v("#")]),a._v(" 패턴 매칭 알고리즘")]),a._v(" "),e("ul",[e("li",[a._v("패턴 매칭 : 본문에서 특정한 문자열을 찾는 것")]),a._v(" "),e("li",[a._v("종류로는 "),e("code",[a._v("고지식한 패턴 검색 알고리즘, KMP 알고리즘, 보이어-무어 알고리즘")]),a._v(" 등이 있다.")])]),a._v(" "),e("h3",{attrs:{id:"brute-force-고지식한-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#brute-force-고지식한-알고리즘"}},[a._v("#")]),a._v(" Brute Force(고지식한 알고리즘)")]),a._v(" "),e("p",[a._v("본문 문자열을 처음부터 끝까지 차례대로 순회하면서 패턴 내의 문자들을 일일이 비교하는 방식으로 동작")]),a._v(" "),e("h4",{attrs:{id:"brute-force-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#brute-force-예제"}},[a._v("#")]),a._v(" Brute Force 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('p = "is" # 찾을 패턴\nt = "This is a book~!" # 전체 텍스트\nM = len(p) # 찾을 패턴의 길이\nN = len(t) # 전체 텍스트의 길이\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def BruteForce(p, t):\n    i = 0 # t의 인덱스\n    j = 0 # p의 인덱스\n    while j < M and i < N:\n        if t[i] != p[j]:\n            i = i - j\n            j = -1\n        i = i + 1\n        j = j + 1\n    if j == M:\n        return i - M # 검색 성공\n    else:\n        return -1 # 검색 실패\n")])])]),e("h3",{attrs:{id:"brute-force-의-시간-복잡도"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#brute-force-의-시간-복잡도"}},[a._v("#")]),a._v(" Brute Force 의 시간 복잡도")]),a._v(" "),e("p",[a._v("최악의 경우 시간 복잡도는 텍스트의 모든 위치에서 패턴을 비교해야 하므로 "),e("code",[a._v("O(MN)")]),a._v("이 됨")]),a._v(" "),e("h3",{attrs:{id:"kmp-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kmp-알고리즘"}},[a._v("#")]),a._v(" KMP 알고리즘")]),a._v(" "),e("p",[a._v("불일치가 발생한 텍스트 문자열의 앞 부분에 어떤 문자가 있는지를 미리 알고 있으므로, 불일치가 발생한 앞 부분에 대하여 다시 비교하지 않고 매칭을 수행")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 패턴을 전처리하여 배열 next[M]을 구해서 잘못된 시작을 최소화함\n    => next[M] : 불일치가 발생했을 경우 이동할 다음 위치\n2. 시간 복잡도\n    => O(M+N)\n")])])]),e("h4",{attrs:{id:"kmp-알고리즘-아이디어-설명"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kmp-알고리즘-아이디어-설명"}},[a._v("#")]),a._v(" KMP 알고리즘 아이디어 설명")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("- 텍스트에서 abcdabc까지는 매치되고, e에서 실패한 상황 패턴의 맨 앞의 abc와 실패 직전의 abc는 동일함을 이용할 수 있음\n- 패턴을 한칸씩 이동하지 않고 패턴의 겹치는 부분을 찾아내 다시 시작할 위치를 구함\n- 몇 번째 문자부터 다시 검색할지 구하기 위한 표를 만들어 계산함\n")])])]),e("h4",{attrs:{id:"패턴-매칭이-실패했을-때-돌아갈-곳을-계산"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#패턴-매칭이-실패했을-때-돌아갈-곳을-계산"}},[a._v("#")]),a._v(" 패턴 매칭이 실패했을 때 돌아갈 곳을 계산")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("- 앞의 예에서 e와 매칭이 실패했고 이때 돌아갈 곳의 계산 값은 3으로 문자 d의 위치를 의미함\n- 패턴의 각 위치에 대해 매칭에 실패했을 때 돌아갈 곳을 준비해 둠\n")])])]),e("h4",{attrs:{id:"ex-kmp-알고리즘-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-kmp-알고리즘-예제"}},[a._v("#")]),a._v(" ex) KMP 알고리즘 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# KMP Algorithm을 통한 패턴 검색\ndef KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n\n    # 건너뛰기 표(skip table) 생성 \n    lps = [0]*M \n    j = 0 # index for pat[] \n\n    # 건너뛰기 표 계산 \n    computeLPSArray(pat, M, lps) \n\n    # 패턴 검색\n    i = 0 # index for txt[]\n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n\n        if j == M: \n            print "Found pattern at index " + str(i-j) \n            j = lps[j-1] \n\n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n\ndef computeLPSArray(pat, M, lps): \n    len = 0 \n\n    lps[0] # lps[0]는 항상 0\n    i = 1\n\n    # 건너뛰기 표의 1번째부터 M-1까지 계산\n    while i < M: \n        if pat[i] == pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # pat[i] != pat[len], 아이디어는 검색단계와 비슷함\n            if len != 0: \n                len = lps[len-1] \n\n            # len == 0\n            else: \n                lps[i] = 0\n                i += 1\n\ntxt = "ABABDABACDABABCABAB"\npat = "ABABCABAB"\nKMPSearch(pat, txt) \n\n# This code is contributed by Bhavya Jain \n')])])]),e("h3",{attrs:{id:"보이어-무어-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#보이어-무어-알고리즘"}},[a._v("#")]),a._v(" 보이어-무어 알고리즘")]),a._v(" "),e("ul",[e("li",[a._v("오른쪽에서 왼쪽으로 비교, 대부분의 상용 소프트웨어에서 채택하고 있는 알고리즘")]),a._v(" "),e("li",[a._v("패턴에 오른쪽 끝에 있는 문자가 불일치하고, 이 문자가 패턴 내에 존재하지 않는 경우, 이동거리는 패턴의 길이 만큼이 됨")])]),a._v(" "),e("h4",{attrs:{id:"오른쪽-끝에-있는-문자가-불일치하고-이-문자가-패턴-내에-존재할-경우"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#오른쪽-끝에-있는-문자가-불일치하고-이-문자가-패턴-내에-존재할-경우"}},[a._v("#")]),a._v(" 오른쪽 끝에 있는 문자가 불일치하고 이 문자가 패턴 내에 존재할 경우")]),a._v(" "),e("ul",[e("li",[a._v("패턴에서 일치하는 문자를 찾아 그 칸 수만큼 점프함")])]),a._v(" "),e("h4",{attrs:{id:"최악의-경우의-보이어-무어-알고리즘-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#최악의-경우의-보이어-무어-알고리즘-예제"}},[a._v("#")]),a._v(" 최악의 경우의 보이어-무어 알고리즘 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# Boyer Moore String Matching Algorithm \nNO_OF_CHARS = 256\n\ndef badCharHeuristic(string, size): \n    badChar = [-1]*NO_OF_CHARS \n\n    for i in range(size): \n        badChar[ord(string[i])] = i; \n\n    return badChar \n\ndef search(txt, pat): \n    m = len(pat) \n    n = len(txt) \n\n    badChar = badCharHeuristic(pat, m) \n\n    s = 0\n    while(s <= n-m): \n        j = m-1\n\n    while j>=0 and pat[j] == txt[s+j]: \n        j -= 1\n\n    if j<0: \n        print("Pattern occur at shift = {}".format(s)) \n\n        s += (m-badChar[ord(txt[s+m])] if s+m<n else 1) \n    else: \n        s += max(1, j-badChar[ord(txt[s+j])]) \n\ndef main(): \n    txt = "ABAAABCD"\n    pat = "ABC"\n    search(txt, pat) \n\n    if __name__ == \'__main__\': \n    main() \n\n# This code is contributed by Atul Kumar  \n\n')])])]),e("p",[a._v("예를 들어 "),e("code",[a._v('txt[] = "AAAAAAAAAAAAAAAAAA"')]),a._v(" 와 "),e("code",[a._v('pat[] = "AAAAA"')]),a._v("일 경우 수행시간이 "),e("code",[a._v("O(mn)(최악의 경우)")]),a._v("이다.")]),a._v(" "),e("h3",{attrs:{id:"문자열-매칭-알고리즘-비교"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#문자열-매칭-알고리즘-비교"}},[a._v("#")]),a._v(" 문자열 매칭 알고리즘 비교")]),a._v(" "),e("p",[a._v("찾고자 하는 문자열 패턴의 길이 m, 총 문자열 길이 n")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("고지식한 패턴 검색 알고리즘")]),a._v(" 수행시간 :  "),e("code",[a._v("O(mn)")])]),a._v(" "),e("li",[e("code",[a._v("카프-라빈 알고리즘")]),a._v(" 수행시간 : "),e("code",[a._v("O(n)")])]),a._v(" "),e("li",[e("code",[a._v("KMP 알고리즘")]),a._v(" 수행시간 : "),e("code",[a._v("O(n)")])]),a._v(" "),e("li",[e("code",[a._v("보이어-무어 알고리즘")]),a._v(" "),e("ul",[e("li",[a._v("텍스트를 모두 보지 않아도 검색 가능")]),a._v(" "),e("li",[a._v("발생의 전환 : 패턴의 오른쪽부터 비교")]),a._v(" "),e("li",[a._v("최악의 경우 수행시간 : "),e("code",[a._v("O(mn)")])])])])]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"reference-additional-resources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[a._v("#")]),a._v(" Reference & Additional Resources")]),a._v(" "),e("blockquote",[e("p",[a._v("SW Expert Academy"),e("br"),a._v(" "),e("a",{attrs:{href:"https://shaeod.tistory.com/228",target:"_blank",rel:"noopener noreferrer"}},[a._v("ASCII Table - 아스키 코드표"),e("OutboundLink")],1),e("br"),a._v(" "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/python-program-for-kmp-algorithm-for-pattern-searching-2/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Python Progrm for KMP Algorithm for Pattern Searching"),e("OutboundLink")],1),e("br"),a._v(" "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Boyer Moore Algorithm for Pattern Searching"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);