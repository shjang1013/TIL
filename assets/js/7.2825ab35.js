(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{338:function(a,r,t){a.exports=t.p+"assets/img/HelloWorld.0555536d.png"},362:function(a,r,t){"use strict";t.r(r);var e=t(21),l=Object(e.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"스프링-부트-환경-설정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#스프링-부트-환경-설정"}},[a._v("#")]),a._v(" 스프링 부트 환경 설정")]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"스프링-부트-시작하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#스프링-부트-시작하기"}},[a._v("#")]),a._v(" 스프링 부트 시작하기")]),a._v(" "),e("h3",{attrs:{id:"프로젝트-생성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#프로젝트-생성"}},[a._v("#")]),a._v(" 프로젝트 생성")]),a._v(" "),e("ul",[e("li",[a._v("JDK 설치")]),a._v(" "),e("li",[a._v("인텔리제이 IDEA 사용하기")]),a._v(" "),e("li",[a._v("프로젝트 유형을 그레이들로 선택해 프로젝트 생성")])]),a._v(" "),e("h3",{attrs:{id:"helloworld"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#helloworld"}},[a._v("#")]),a._v(" HelloWorld")]),a._v(" "),e("img",{attrs:{src:t(338)}}),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("@RestController")])]),a._v(" "),e("ul",[e("li",[a._v("@Controller와 @ResponseBody를 합쳐놓은 역할을 수행된다.")]),a._v(" "),e("li",[a._v("어노테이션을 사용하면 반환값이 Response Body 부분에 자동으로 바인딩된다.")]),a._v(" "),e("li",[a._v("스프링에서 RESTful 웹 서비스를 만들 때 주로 사용")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("@GetMapping")])]),a._v(" "),e("ul",[e("li",[a._v("Get 방식으로 경로를 받는 매핑 어노테이션")]),a._v(" "),e("li",[a._v("value 값을 별도로 지정하지 않으면 기본값인 빈 값이 들어간다.")])])]),a._v(" "),e("li",[e("p",[a._v("메인 메서드를 실행한 후 브라우저에서 "),e("code",[a._v("localhost:8080")]),a._v('에 접속하여 "Hello World"가 제대로 출력되는지 확인한다.')])])]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"그레이들"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#그레이들"}},[a._v("#")]),a._v(" 그레이들")]),a._v(" "),e("h3",{attrs:{id:"그레이들과-메이븐의-특징"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#그레이들과-메이븐의-특징"}},[a._v("#")]),a._v(" 그레이들과 메이븐의 특징")]),a._v(" "),e("ul",[e("li",[a._v("그레이들\n"),e("ul",[e("li",[a._v("기본적인 빌도 도구의 기능")]),a._v(" "),e("li",[a._v("메이븐으로부터 의존 라이브러리 관리 기능을 차용")]),a._v(" "),e("li",[a._v("멀티 프로젝트 구성 시 설정 주입 방식을 사용")])])]),a._v(" "),e("li",[a._v("메이븐\n"),e("ul",[e("li",[a._v("메이븐 설정 파일인 pom.xml은 XML 기반으로 작서")]),a._v(" "),e("li",[a._v("동적인 행위에 제약이 존재")]),a._v(" "),e("li",[a._v("멀티 프로젝트 구성 시 상속 구조로 이루어짐")])])])]),a._v(" "),e("h3",{attrs:{id:"그레이들-프로젝트-구조"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#그레이들-프로젝트-구조"}},[a._v("#")]),a._v(" 그레이들 프로젝트 구조")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("├── gradle\n|    └── wrapper\n|        ├── gradle-wrapper.jar\n|        └── gradle-wrapper.properties\n├── gradlew\n└── gradlew.bat\n")])])]),e("ul",[e("li",[a._v("gradlew\n"),e("ul",[e("li",[a._v("리눅스 및 맥 OS용 셸 스크립트")]),a._v(" "),e("li",[a._v("버전 변경 명령어\n"),e("ul",[e("li",[e("code",[a._v("./gradlew wrapper --gradle-version 4.10.2")])])])])])]),a._v(" "),e("li",[a._v("gradlew.bat\n"),e("ul",[e("li",[a._v("윈도우용 배치 스크립트")])])]),a._v(" "),e("li",[a._v("gradle/wrapper/gradle-wrapper.jar\n"),e("ul",[e("li",[a._v("Wrapper JAR")])])]),a._v(" "),e("li",[a._v("gradle/wrapper/gradle-wrapper.properties\n"),e("ul",[e("li",[a._v("그레이들 설정 정보 프로퍼티 파일(버전 정보 등)")]),a._v(" "),e("li",[a._v("distributionUrl을 원하는 그레이들 버전으로 수정")])])])]),a._v(" "),e("p",[a._v("위의 파일은 모두 그레이들 래퍼와 관련된 설정이며 프로젝트 첫 설정 시 그레이들 관련 빌드 설정을 자동으로 해준다.")]),a._v(" "),e("h3",{attrs:{id:"그레이들-멀티-프로젝트-구성하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#그레이들-멀티-프로젝트-구성하기"}},[a._v("#")]),a._v(" 그레이들 멀티 프로젝트 구성하기")]),a._v(" "),e("ul",[e("li",[a._v("그레이들 멀티 프로젝트를 활용하면 여러 프로젝트를 마치 하나의 프로젝트처럼 사용할 수 있다.\n"),e("ul",[e("li",[a._v("공통 코드를 하나의 프로젝트로 분리하고 이를 재사용할 때 유리하다.")])])])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("setting.gradle 파일에 루트 프로젝트를 추가한다.")]),a._v(" "),e("ul",[e("li",[a._v("setting.gradle 파일 : 그레이들 설정 파일")]),a._v(" "),e("li",[a._v("특정한 명령 규칙에 따라 그레이들에서 자동으로 인식하여 설정한다.")]),a._v(" "),e("li",[a._v("rootProject.name = 'SpringBoot-study'")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("SpringBoot-study-web")]),a._v(" 모듈을 생성한다.")]),a._v(" "),e("ul",[e("li",[a._v("루트 경로에서 New - Module 선택")])])]),a._v(" "),e("li",[e("p",[a._v("ArtifactId에 "),e("code",[a._v("SpringBoot-study-web")]),a._v("을 입력한 후 모듈을 생성한다.")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("SpringBoot-study-web")]),a._v(" 모듈에는 build.gradle 파일만 존재한다.")]),a._v(" "),e("ul",[e("li",[a._v("기본 패키지 경로는 수동으로 생성")]),a._v(" "),e("li",[a._v("src/main/java : 자바 소스 경로")]),a._v(" "),e("li",[a._v("src/test/java : 스프링 부트의 테스트 코드 경로")]),a._v(" "),e("li",[a._v("src/main/resources/static : static한 파일(css, image, js 등)의 디폴트 경로")]),a._v(" "),e("li",[a._v("src/main/resources/templates : thymeleaf, freemarker 및 기타 서버 사이드 템플릿 파일의 경로")])])])]),a._v(" "),e("h4",{attrs:{id:"springboot-study-프로젝트-멀티-모듈-구조"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot-study-프로젝트-멀티-모듈-구조"}},[a._v("#")]),a._v(" SpringBoot-study 프로젝트 멀티 모듈 구조")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("├── .gradle\n├── .idea\n├── gradle\n├── SpringBoot-study-domain\n|    └── src\n|         ├── main\n|         |    └── java\n|         |         └── com\n|         |              └── sohyeon\n|         └── test\n|              └── java\n|                   └── com\n|                        └── sohyeon\n└── SpringBoot-study-web\n     └── src\n          ├── main\n          |    ├── java\n          |    |    └── com\n          |    |         └── sohyeon\n          |    └── resources\n          |         ├── static\n          |         └── templates\n          └── test\n               └── java\n                    └── com\n                         └── sohyeon\n")])])]),e("br"),a._v(" "),e("h2",{attrs:{id:"환경-프로퍼티-파일-설정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#환경-프로퍼티-파일-설정"}},[a._v("#")]),a._v(" 환경 프로퍼티 파일 설정")]),a._v(" "),e("h3",{attrs:{id:"환경-프로퍼티-파일의-특징"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#환경-프로퍼티-파일의-특징"}},[a._v("#")]),a._v(" 환경 프로퍼티 파일의 특징")]),a._v(" "),e("ul",[e("li",[a._v("스프링 부트 프로퍼티 파일은 설정 관련 및 기타 정적인 값을 키값 형식으로 관리한다.\n"),e("ul",[e("li",[a._v("기존 스프링 프레임워크의 복잡한 XML 설정을 파일 하나로 설정할 수 있다.")])])]),a._v(" "),e("li",[a._v("최근에는 프로퍼티 파일의 표현의 한계로 "),e("code",[a._v("YAML 파일")]),a._v("을 더 많이 사용한다.")]),a._v(" "),e("li",[a._v("YAML 파일은 프로퍼티 설정값의 깊에에 따라 들여쓰기를 해서 계층 구조를 훨씬 쉽게 파악할 수 있다.")])]),a._v(" "),e("h3",{attrs:{id:"프로파일에-따른-환경-구성-분리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#프로파일에-따른-환경-구성-분리"}},[a._v("#")]),a._v(" 프로파일에 따른 환경 구성 분리")]),a._v(" "),e("p",[a._v("실제 서비스에서 개발한다면 로컬 DB, 개발 DB, 운영 DB의 설정값이 모두 다르다."),e("br"),a._v("\n- 이런 경우를 대비해 "),e("code",[a._v("프로파일에 따라 프로퍼티를 다르게 설정")]),a._v("해야 한다.")]),a._v(" "),e("ol",[e("li",[a._v("YAML 파일에서 프로퍼티 설정을 구분하는 방법\n"),e("ul",[e("li",[e("code",[a._v("---")]),a._v("을 기준으로 설정값을 나눈다.")])])]),a._v(" "),e("li",[a._v("application-{profile}.yml을 이용한다.\n"),e("ul",[e("li",[a._v("프로퍼티 적용 우선순위는 application-{profile}.yml이 1순위다.")]),a._v(" "),e("li",[a._v("나머지 프로퍼티 값들은 application.yml의 설정으로 적용된다.")])])])]),a._v(" "),e("h4",{attrs:{id:"application-yml에서-프로파일별-설정-구분-예시"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#application-yml에서-프로파일별-설정-구분-예시"}},[a._v("#")]),a._v(" application.yml에서 프로파일별 설정 구분 예시")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("server:\n    port: 80\n---\nspring:\n    profiles: local\nserver:\n    port: 8080\n---\nspring:\n    profiles: dev\nserver:\n    port: 8081\n---\nspring:\n    profiles: real\nserver:\n    port: 8082\n")])])]),e("h3",{attrs:{id:"프로파일값을-적용하여-애플리케이션을-실행하는-방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#프로파일값을-적용하여-애플리케이션을-실행하는-방법"}},[a._v("#")]),a._v(" 프로파일값을 적용하여 애플리케이션을 실행하는 방법")]),a._v(" "),e("ul",[e("li",[a._v("local, dev, real과 같이 각각의 프로파일값을 따로 지정하여 애플리케이션을 실행한다.\n"),e("ul",[e("li",[a._v("스프링 부트 프로젝트는 JAR 파일로 빌드하여 서버에서 실행할 수 있다.")]),a._v(" "),e("li",[e("code",[a._v("$ java -jar ... -D spring.profiles.active=dev")])])])]),a._v(" "),e("li",[a._v("인텔리제이는 스프링 부트 실행 플러그인을 따로 사용한다.\n"),e("ul",[e("li",[a._v("Edit Configurations 버튼을 눌러 Run/Debug Configurations 창을 실행한다.")]),a._v(" "),e("li",[a._v("스프링 부트 플러그인의 프로파일값을 할당한다.")])])])]),a._v(" "),e("h3",{attrs:{id:"yaml-파일-매핑하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yaml-파일-매핑하기"}},[a._v("#")]),a._v(" YAML 파일 매핑하기")]),a._v(" "),e("ul",[e("li",[a._v("YAML 파일을 사용하면 깊이에 따라 관계를 구분 짓기 때문에 List, Set, Map 등 다양한 바인딩형 매핑이 훨씬 간편하다.")]),a._v(" "),e("li",[a._v("YAML 파일에 있는 데이터를 가져와서 사용하는 방법\n"),e("ul",[e("li",[a._v("@Value\n"),e("ul",[e("li",[a._v("SpEL(Spring Expression Languate, 스프링 표현 언어) 평가\n"),e("ul",[e("li",[a._v("SpEL은 런타임에 객체 참조에 대해 질의하고 조작하는 기능을 지원하는 언어다.")]),a._v(" "),e("li",[a._v("메서드 호출 및 기본 문자열 템플릿 기능을 제공한다.")])])])])]),a._v(" "),e("li",[a._v("@ConfigurationProperties\n"),e("ul",[e("li",[a._v("유연한 바인딩\n"),e("ul",[e("li",[a._v("프로퍼티값을 객체에 바인딩할 경우 필드를 낙타 표기법으로 선언하고 프로퍼티의 키는 다양한 형식(낙타, 케밥, 언더바 표기법)으로 선언하여 바인딩할 수 있다.")])])]),a._v(" "),e("li",[a._v("메타데이터 지원\n"),e("ul",[e("li",[a._v("프로퍼티의 키에 대한 정보를 메타데이터 파일(JSON)로 제공한다.")])])])])])])])]),a._v(" "),e("h3",{attrs:{id:"value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" @Value")]),a._v(" "),e("h3",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" @Configuration")]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"reference-additional-resources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[a._v("#")]),a._v(" Reference & Additional Resources")]),a._v(" "),e("blockquote",[e("p",[a._v("처음 배우는 스프링 부트2")])])])}),[],!1,null,null,null);r.default=l.exports}}]);