(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{373:function(v,_,t){"use strict";t.r(_);var e=t(27),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"_200728-면접-준비"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_200728-면접-준비"}},[v._v("#")]),v._v(" 200728 면접 준비")]),v._v(" "),t("p",[t("em",[v._v("written by sohyeon")]),v._v("🍀")]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"jndi의-개념"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jndi의-개념"}},[v._v("#")]),v._v(" JNDI의 개념")]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"커넥션-풀의-개념"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#커넥션-풀의-개념"}},[v._v("#")]),v._v(" 커넥션 풀의 개념")]),v._v(" "),t("h3",{attrs:{id:"커넥션-풀-dbcp-이란"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#커넥션-풀-dbcp-이란"}},[v._v("#")]),v._v(" 커넥션 풀(DBCP)이란?")]),v._v(" "),t("p",[v._v("웹 컨테이너(WAS)가 실행되면서 DB와 미리 connection(연결)을 해놓은 객체들을 pool에 저장해두었다가, 클라이언트 요청이 오면 connection을 빌려주고, 처리가 끝나면 다시 connection을 반납받아 pool에 저장하는 방식을 말한다.")]),v._v(" "),t("h3",{attrs:{id:"커넥션-풀의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#커넥션-풀의-특징"}},[v._v("#")]),v._v(" 커넥션 풀의 특징")]),v._v(" "),t("ul",[t("li",[v._v("웹 컨테이너(WAS)가 실행되면서 connection 객체를 미리 pool에 생성해둔다.")]),v._v(" "),t("li",[v._v("HTTP 요청에 따라 pool에서 connection객체를 가져다 쓰고 반환한다.\n"),t("ul",[t("li",[v._v("물리적인 데이터베이스 connection(연결) 부하를 줄이고 연결 관리 한다.")])])]),v._v(" "),t("li",[v._v("pool에 미리 connection이 생성되어 있기 때문에 connection을 생성하는 데 드는 요정 마다 연결 시간이 소비되지 않는다.")]),v._v(" "),t("li",[v._v("커넥션을 계속해서 재사용하기 때문에 생성되는 커넥션 수를 제한적으로 설정한다.")])]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"mvc-model1-model2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-model1-model2"}},[v._v("#")]),v._v(" MVC(Model1, Model2)")]),v._v(" "),t("h3",{attrs:{id:"모델-model-뷰-view-컨트롤러-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#모델-model-뷰-view-컨트롤러-controller"}},[v._v("#")]),v._v(" 모델(Model), 뷰(View), 컨트롤러(Controller)")]),v._v(" "),t("ul",[t("li",[v._v("Model\n"),t("ul",[t("li",[v._v("데이터를 가진 객체, 파라미터로 자주 쓰인다.")]),v._v(" "),t("li",[v._v("DB의 테이블과 대응하는 경우가 많다.")])])]),v._v(" "),t("li",[v._v("View\n"),t("ul",[t("li",[v._v("UI를 담당한다.")]),v._v(" "),t("li",[v._v("클라이언트 측 기술인 Html, Css, Javascript등으로 만들어진 컨테이너이다.")])])]),v._v(" "),t("li",[v._v("Controller\n"),t("ul",[t("li",[v._v("UI를 통한 사용자의 입력 명령에 응답하고, 및 데이터 흐름 제어를 담당한다.")])])])]),v._v(" "),t("h3",{attrs:{id:"model1-패턴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model1-패턴"}},[v._v("#")]),v._v(" Model1 패턴")]),v._v(" "),t("p",[v._v("비즈니스 로직 영역(Controller)에 프레젠테이션 영역(View)을 같이 구현하는 방식이다.")]),v._v(" "),t("h3",{attrs:{id:"model2-패턴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model2-패턴"}},[v._v("#")]),v._v(" Model2 패턴")]),v._v(" "),t("p",[v._v("비즈니스 로직 영역과 프레젠테이션 영역이 분리되어 있는 구현 방식이다.")]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"spring-정의-및-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-정의-및-특징"}},[v._v("#")]),v._v(" Spring 정의 및 특징")]),v._v(" "),t("h3",{attrs:{id:"spring-framework란"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework란"}},[v._v("#")]),v._v(" Spring Framework란?")]),v._v(" "),t("p",[t("code",[v._v("Spring Framework")]),v._v("는 개발자가 비즈니스 로직에 집중할 수 있도록, Java 기반 엔터프라이즈 애플리케이션을 위한 종합적인 기능들을 지원한다.")]),v._v(" "),t("h3",{attrs:{id:"spring-framework의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework의-특징"}},[v._v("#")]),v._v(" Spring Framework의 특징")]),v._v(" "),t("ul",[t("li",[t("p",[t("code",[v._v("POJO 기반의 구성")])]),v._v(" "),t("ul",[t("li",[v._v("POJO(Plain Old Java Object) : 일반적인 Java 코드를 이용해서 객체를 구성하는 방식")]),v._v(" "),t("li",[v._v("관계를 구성할 때 별도의 API 등을 사용하지 않는다.")]),v._v(" "),t("li",[v._v("코드를 개발할 때 개발자가 특정한 라이브러리나 컨테이너의 기술에 종속적이지 않다.")]),v._v(" "),t("li",[v._v("가장 일반적인 형태로 코드를 작성하고 실행할 수 있기 때문에 생산성에서도 유리하고, 코드에 대한 테스트 작업을 유연하게 할 수 있다.")])])]),v._v(" "),t("li",[t("p",[t("code",[v._v("의존성 주입(DI)")]),v._v("을 통한 객체 간의 관계 구성")]),v._v(" "),t("ul",[t("li",[v._v("스프링에서는 "),t("code",[v._v("ApplicationContext")]),v._v("라는 존재가 필요한 객체들을 생성하고, 필요한 객체들을 주입하는 역할을 해 주는 구조이다.")]),v._v(" "),t("li",[v._v("스프링에서는 ApplicationContext가 관리하는 객체들을 "),t("code",[v._v("빈(Bean)")]),v._v("이라고 부르고, 빈과 빈 사이의 의존관계를 처리하는 방식으로 "),t("code",[v._v("XML 설정")]),v._v(", "),t("code",[v._v("어노테이션 설정")]),v._v(", "),t("code",[v._v("Java 설정")]),v._v(" 등이 있다.")])])]),v._v(" "),t("li",[t("p",[t("code",[v._v("AOP(Aspect-Oriented-Programming)")]),v._v(" 지원")]),v._v(" "),t("ul",[t("li",[v._v("스프링은 프레임워크를 이용한 개발에서 "),t("code",[v._v("반복적인 코드를 줄이고")]),v._v(", "),t("code",[v._v("핵심 비즈니스 로직에만 집중할 수 있는 방법을 제공")]),v._v("한다.")]),v._v(" "),t("li",[t("code",[v._v("AOP(Aspect-Oriented-Programming)")]),v._v("는 횡단 관심사를 모듈로 분리하는 프로그래밍의 패러다임이다.")]),v._v(" "),t("li",[v._v("스프링은 AOP를 "),t("code",[v._v("AspectJ의 문법")]),v._v("을 통해서 작성할 수 있다.\n"),t("ul",[t("li",[v._v("핵심 비즈니스 로직에만 집중해서 코드를 개발할 수 있다.")]),v._v(" "),t("li",[v._v("각 프로젝트마다 다른 관심사를 적용할 때 코드의 수정을 최소화시킬 수 있다.")])])])])]),v._v(" "),t("li",[t("p",[v._v("편리한 "),t("code",[v._v("MVC 구조")])])])]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"mybatis-vs-hibernate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-vs-hibernate"}},[v._v("#")]),v._v(" MyBatis vs Hibernate")]),v._v(" "),t("h3",{attrs:{id:"mybatis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[v._v("#")]),v._v(" MyBatis")]),v._v(" "),t("ul",[t("li",[v._v("개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 SQL Mapper이다.")]),v._v(" "),t("li",[v._v("JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.")]),v._v(" "),t("li",[v._v("기존에 JDBC를 사용할 때는 DB와 관련된 여러 복잡한 설정(Connection)들을 다루어야 했지만 SQL Mapper는 자바 객체를 실제 SQL문에 연결함으로써, 빠른 개발과 편리한 테스트 환경을 제공한다.")])]),v._v(" "),t("h3",{attrs:{id:"mybatis의-장점과-단점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis의-장점과-단점"}},[v._v("#")]),v._v(" MyBatis의 장점과 단점")]),v._v(" "),t("ul",[t("li",[v._v("장점\n"),t("ul",[t("li",[v._v("SQL에 대한 모든 컨트롤을 하고자 할때 매우 적합하다.")]),v._v(" "),t("li",[v._v("SQL쿼리들이 매우 잘 최적화되어 있을 때에 유용하다.")])])]),v._v(" "),t("li",[v._v("단점\n"),t("ul",[t("li",[v._v("애플리케이션과 데이터베이스 간의 설계에 대한 모든 조작을 하고자 할 때는 적합하지 않다.")]),v._v(" "),t("li",[v._v("애플리케이션과 데이터베이스 간에 서로 잘 구조화되도록 많은 설정이 바뀌어야 하기 때문이다.")])])])]),v._v(" "),t("h3",{attrs:{id:"hibernate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hibernate"}},[v._v("#")]),v._v(" Hibernate")]),v._v(" "),t("ul",[t("li",[v._v("Hibernate는 JPA의 구현체 중 하나이다.")]),v._v(" "),t("li",[v._v("Hibernate가 SQL을 직접 사용하지 않는다고 해서 JDBC API를 사용하지 않는다는 것은 아니다.\n"),t("ul",[t("li",[v._v("Hibernate가 지원하는 메서드 내부에서는 JDBC API가 동작하고 있으며, 단지 개발자가 직접 SQL을 직접 작성하지 않을 뿐이다.")])])])]),v._v(" "),t("h3",{attrs:{id:"hibernate의-장점과-단점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hibernate의-장점과-단점"}},[v._v("#")]),v._v(" Hibernate의 장점과 단점")]),v._v(" "),t("ul",[t("li",[v._v("장점\n"),t("ul",[t("li",[v._v("객체지향적으로 데이터를 관리할 수 있기 때문에 비즈니스 로직에 집중 할 수 있으며, 객체지향 개발이 가능하다.")]),v._v(" "),t("li",[v._v("테이블 생성, 변경, 관리가 쉽다. (JPA를 잘 이해하고 있는 경우)")]),v._v(" "),t("li",[v._v("로직을 쿼리에 집중하기 보다는 객체자체에 집중 할 수 있다.")]),v._v(" "),t("li",[v._v("빠른 개발이 가능하다.")])])]),v._v(" "),t("li",[v._v("단점\n"),t("ul",[t("li",[v._v("어렵다. (많은 내용이 감싸져 있기 때문에 알아야 할 것이 많다.)")]),v._v(" "),t("li",[v._v("잘 이해하고 사용하지 않으면 데이터 손실이 있을 수 있다. (persistence context)")]),v._v(" "),t("li",[v._v("성능상 문제가 있을 수 있다. (이 문제 또한 잘 이해해야 해결이 가능하다.)")])])])]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"동기-방식-vs-비동기-방식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#동기-방식-vs-비동기-방식"}},[v._v("#")]),v._v(" 동기 방식 vs 비동기 방식")]),v._v(" "),t("h3",{attrs:{id:"동기-방식-synchronous"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#동기-방식-synchronous"}},[v._v("#")]),v._v(" 동기 방식(Synchronous)")]),v._v(" "),t("p",[v._v("요청을 보낸 후 응답(=결과)를 받아야지만 다음 동작이 이루어지는 방식, 어떠한 일을 처리할 동안 다른 프로그램은 정지한다.")]),v._v(" "),t("h3",{attrs:{id:"비동기-방식-asynchronous"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#비동기-방식-asynchronous"}},[v._v("#")]),v._v(" 비동기 방식(Asynchronous)")]),v._v(" "),t("p",[v._v("요청을 보낸 후 응답(=결과)와는 상관없이 다음 동작이 이루어지는 방식, 결과가 주어지는데 시간이 걸리더라도 그 시간동안 다른 작업을 할 수 있으므로 자원을 효율적으로 사용할 수 있다.")]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"get-방식-vs-post-방식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-방식-vs-post-방식"}},[v._v("#")]),v._v(" Get 방식 vs Post 방식")]),v._v(" "),t("h3",{attrs:{id:"get-방식"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-방식"}},[v._v("#")]),v._v(" Get 방식")]),v._v(" "),t("p",[v._v("Get은  "),t("code",[v._v("서버로부터 정보를 조회하기 위해 설계된 메소드")]),v._v("다.")]),v._v(" "),t("h3",{attrs:{id:"get-방식의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-방식의-특징"}},[v._v("#")]),v._v(" Get 방식의 특징")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("Get은 "),t("code",[v._v("요청을 전송할 때 필요한 데이터를 Body에 담지 않고")]),v._v(", "),t("code",[v._v("쿼리스트링")]),v._v("을 통해 전송한다.")]),v._v(" "),t("ul",[t("li",[v._v("쿼리스트링은 URL의 끝에 "),t("code",[v._v("?")]),v._v("와 함께 이름과 값으로 쌍을 이루는 요청 파라미터를 말하는데, 요청 파라미터가 여러 개이면 "),t("code",[v._v("&")]),v._v("로 연결한다.")])])]),v._v(" "),t("li",[t("p",[t("code",[v._v("www.example-url.com/resources?name1=val1&name2=val2")])]),v._v(" "),t("ul",[t("li",[v._v("쿼리스트링을 포함한 URL로, 요청 파라미터명은 name1, name2이고, 각각의 파라미터는 val1, val2라는 값으로 서버에 요청을 보낸다.")]),v._v(" "),t("li",[v._v("또한, 위와 같이 GET을 사용하는 경우 "),t("code",[v._v("데이터가 노출되어 보안에 취약")]),v._v("할 수 있으며, "),t("code",[v._v("URL의 길이가 정해져 있어")]),v._v(" 많은 양의 정보를 전달할 수 없다.")])])]),v._v(" "),t("li",[t("p",[v._v("Get은 "),t("code",[v._v("불필요한 요청을 제한하기 위해 요청이 캐시")]),v._v("될 수 있다.")]),v._v(" "),t("ul",[t("li",[v._v("js, css, 이미지와 같은 정적 컨텐츠는 데이터양이 크고, 변경될 일이 적어서 반복해서 동일한 요청을 보낼 필요가 없다.")]),v._v(" "),t("li",[v._v("따라서, 정적 컨텐츠를 요청하고 나면 브라우저에서는 요청을 캐시해두고, 동일한 요청이 발생할 때 서버로 요청을 보내지 않고 캐시된 데이터를 사용한다.")]),v._v(" "),t("li",[v._v("만약 정적 컨텐츠를 변경했을 때, 내용이 바뀌지 않는 경우에는 브라우저의 캐시를 지워줌으로써 이를 해결한다.")])])])]),v._v(" "),t("h3",{attrs:{id:"post"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[v._v("#")]),v._v(" POST")]),v._v(" "),t("p",[v._v("POST는 GET과 달리 리소스를 생성/변경하기 위해 설계되었기 때문에 "),t("code",[v._v("전송해야 될 데이터를 HTTP 메세지의 Body에 담아서 전송")]),v._v("한다.")]),v._v(" "),t("h3",{attrs:{id:"post의-특징"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#post의-특징"}},[v._v("#")]),v._v(" POST의 특징")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("POST는 전송해야 할 데이터를 HTTP 메세지의 Body에 담아서 전송한다.")]),v._v(" "),t("ul",[t("li",[v._v("데이터가 Body로 전송되고 내용이 눈에 보이지 않아 GET보다 보안적인 면에서 안전하다고 생각할 수 있지만, "),t("code",[v._v("POST 요청도 크롬 개발자 도구, Fiddler와 같은 툴로 요청 내용을 확인할 수 있다.")])]),v._v(" "),t("li",[v._v("따라서, 민감한 데이터의 경우에는 "),t("code",[v._v("암호화하여 전송")]),v._v("해야 한다.")])])]),v._v(" "),t("li",[t("p",[v._v("POST는 "),t("code",[v._v("URL에 데이터를 노출하지 않으므로 즐겨찾기나 캐싱이 불가능")]),v._v("하다.")])]),v._v(" "),t("li",[t("p",[v._v("HTTP 메세지의 "),t("code",[v._v("Body는 길이의 제한없이")]),v._v(" 대용량 데이터를 전송할 수 있다.")])]),v._v(" "),t("li",[t("p",[v._v("POST로 요청을 보낼 때는 "),t("code",[v._v("요청 헤더의 Content-Type에 요청 데이터의 타입을 표시")]),v._v("해야 한다.")]),v._v(" "),t("ul",[t("li",[v._v("데이터 타입을 표시하지 않으면 서버는 내용이나 URL에 포함된 리소스의 확장자명 등으로 데이터 타입을 유추한다.")]),v._v(" "),t("li",[v._v("알 수 없는 경우에는 application/octet-stream로 요청을 처리한다.")])])])]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"쿠키-vs-세션"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#쿠키-vs-세션"}},[v._v("#")]),v._v(" 쿠키 vs 세션")]),v._v(" "),t("h3",{attrs:{id:"세션-쿠키-사용하는-이유"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#세션-쿠키-사용하는-이유"}},[v._v("#")]),v._v(" 세션, 쿠키 사용하는 이유")]),v._v(" "),t("p",[v._v("비연결지향이란 특징 때문에 서버 입장에서는 통신 연결을 유지하지 않기 때문에 리소스 낭비가 줄어드는 것은 큰 장점이지만 통신 시마다 새로운 세션을 열어야 하는 작업은 클라이언트가 서버에게 요청을 할 때마다 인증을 해야하는 단점이 생겼다. 따라서 HTTP는 2가지 특성을 보완하기 위해서 쿠키와 세션을 사용하게 되었다.")]),v._v(" "),t("h3",{attrs:{id:"쿠키-cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#쿠키-cookie"}},[v._v("#")]),v._v(" 쿠키(Cookie)")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("쿠키")]),v._v("는 클라이언트 "),t("code",[v._v("로컬")]),v._v("에 저장되는 키와 값이 들어있는 작은 데이터 파일이다.")]),v._v(" "),t("li",[v._v("사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있다.")]),v._v(" "),t("li",[v._v("쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.")]),v._v(" "),t("li",[v._v("쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다.")])]),v._v(" "),t("h3",{attrs:{id:"세션-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#세션-session"}},[v._v("#")]),v._v(" 세션(Session)")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("세션")]),v._v("은 쿠키를 기반하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 세션은 "),t("code",[v._v("서버")]),v._v(" 측에서 관리한다.")]),v._v(" "),t("li",[v._v("서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지한다.")]),v._v(" "),t("li",[v._v("접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능하다.")]),v._v(" "),t("li",[v._v("사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지한다.\n"),t("ul",[t("li",[t("code",[v._v("즉, 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이다")])])])]),v._v(" "),t("li",[v._v("클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션ID다.")])]),v._v(" "),t("h3",{attrs:{id:"쿠키와-세션의-차이점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#쿠키와-세션의-차이점"}},[v._v("#")]),v._v(" 쿠키와 세션의 차이점")]),v._v(" "),t("ul",[t("li",[v._v("쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용한다.")]),v._v(" "),t("li",[v._v("보안 면에서 세션이 더 우수하며, 요청 속도는 쿠키가 세션보다 더 빠르다.\n"),t("ul",[t("li",[t("code",[v._v("세션은 서버의 처리가 필요하기 때문")])])])]),v._v(" "),t("li",[t("code",[v._v("쿠키")]),v._v("는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만,"),t("br"),v._v(" "),t("code",[v._v("세션")]),v._v("은 쿠키를 이용해서 sessionid 만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 비교적 보안성이 좋다.")]),v._v(" "),t("li",[v._v("쿠키도 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아 있을 수 있다.")])]),v._v(" "),t("br"),v._v(" "),t("h2",{attrs:{id:"reference-additional-resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[v._v("#")]),v._v(" Reference & Additional Resources")]),v._v(" "),t("h3",{attrs:{id:"jndi의-개념-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jndi의-개념-2"}},[v._v("#")]),v._v(" JNDI의 개념")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://all-record.tistory.com/104",target:"_blank",rel:"noopener noreferrer"}},[v._v("JNDI, DBCP(커넥션풀) 이용"),t("OutboundLink")],1)])]),v._v(" "),t("h3",{attrs:{id:"커넥션-풀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#커넥션-풀"}},[v._v("#")]),v._v(" 커넥션 풀")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://linked2ev.github.io/spring/2019/08/14/Spring-3-%EC%BB%A4%EB%84%A5%EC%85%98-%ED%92%80%EC%9D%B4%EB%9E%80/",target:"_blank",rel:"noopener noreferrer"}},[v._v("커넥션 풀(Connection pool)이란?"),t("OutboundLink")],1)])]),v._v(" "),t("h3",{attrs:{id:"mybatis-vs-hibernate-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-vs-hibernate-2"}},[v._v("#")]),v._v(" Mybatis vs Hibernate")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("JDBC, JPA/Hibernate, Mabatis의 차이"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);