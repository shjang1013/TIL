(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{375:function(t,e,r){"use strict";r.r(e);var a=r(27),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"itertools-모듈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#itertools-모듈"}},[t._v("#")]),t._v(" itertools 모듈")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"itertools-모듈-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#itertools-모듈-2"}},[t._v("#")]),t._v(" itertools 모듈")]),t._v(" "),r("p",[r("code",[t._v("itertools")]),t._v("는 반복 가능한 데이터 원소들을 처리하는 데 유용한 함수와 제네레이터가 포함되어 있다.")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"permutations-iterable-r"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#permutations-iterable-r"}},[t._v("#")]),t._v(" permutations(iterable, r)")]),t._v(" "),r("p",[r("code",[t._v("permutations()")]),t._v("은 iterable의 원소로 순열을 구할 수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("순열 : 서로 다른 것들 중 몇 개를 뽑아서 한 줄로 나열하는 것")]),t._v(" "),r("li",[t._v("r 생략 시 기본값으로 리스트의 크기")])]),t._v(" "),r("h4",{attrs:{id:"permutations-을-활용한-순열-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#permutations-을-활용한-순열-예제"}},[t._v("#")]),t._v(" permutations()을 활용한 순열 예제")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import itertools\n\nmylist = [1,2,3]\nresult = itertools.permutations(mylist, 2)\n\nprint(list(result))\n\n# 결과\n[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n")])])]),r("br"),t._v(" "),r("h2",{attrs:{id:"product-iter1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#product-iter1"}},[t._v("#")]),t._v(" product(iter1)")]),t._v(" "),r("p",[r("code",[t._v("product()")]),t._v("은 iter1의 원소로 중복 순열을 구할 수 있다.")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("repeat = r")]),t._v("과 같은 형태로 작성할 것")])]),t._v(" "),r("h4",{attrs:{id:"product-를-활용한-중복-순열-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#product-를-활용한-중복-순열-예제"}},[t._v("#")]),t._v(" product()를 활용한 중복 순열 예제")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import itertools\n\nmylist = [1,2,3]\nresult = itertools.product(mylist, repeat = 2)\n\nprint(list(result))\n\n# 결과\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n")])])]),r("br"),t._v(" "),r("h2",{attrs:{id:"combinations-iterable-r"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#combinations-iterable-r"}},[t._v("#")]),t._v(" combinations(iterable, r)")]),t._v(" "),r("p",[r("code",[t._v("combinations()")]),t._v("은 iterable의 원소로 조합을 구할 수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("조합 : 서로 다른 n개의 원소 중 r개를 순서 없이 골라낸 것")]),t._v(" "),r("li",[r("code",[t._v("r을 생략해서는 안됨")]),t._v(", TypeError 발생")]),t._v(" "),r("li")]),t._v(" "),r("h4",{attrs:{id:"combinations-을-활용한-조합-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#combinations-을-활용한-조합-예제"}},[t._v("#")]),t._v(" combinations()을 활용한 조합 예제")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import itertools\n\nmylist = [1,2,3]\nresult = itertools.combinations(mylist, 2)\n\nprint(list(result))\n\n# 결과\n[(1, 2), (1, 3), (2, 3)]\n")])])]),r("br"),t._v(" "),r("h2",{attrs:{id:"combinations-with-replacement-iterable-r"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#combinations-with-replacement-iterable-r"}},[t._v("#")]),t._v(" combinations_with_replacement(iterable, r)")]),t._v(" "),r("p",[r("code",[t._v("combinations_with_replacement()")]),t._v("은 iterable의 원소로 중복 조합을 구할 수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("combinations()와 마찬가지로 "),r("code",[t._v("r을 생략해서는 안됨")]),t._v(", TypeError 발생")])]),t._v(" "),r("h4",{attrs:{id:"combinations-with-replacement-을-활용한-중복-조합-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#combinations-with-replacement-을-활용한-중복-조합-예제"}},[t._v("#")]),t._v(" combinations_with_replacement()을 활용한 중복 조합 예제")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import itertools\n\nmylist = [1,2,3]\nresult = itertools.combinations_with_replacement(mylist, 2)\n\nprint(list(result))\n\n# 결과\n[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\n")])])]),r("br"),t._v(" "),r("h2",{attrs:{id:"cycle-iterable"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cycle-iterable"}},[t._v("#")]),t._v(" cycle(iterable)")]),t._v(" "),r("p",[r("code",[t._v("cycle()")]),t._v("은 iterable에서 요소를 반환하고 각각의 복사본을 저장하는 반복자를 만든다."),r("br"),t._v("\n반복 가능한 요소가 모두 소모되면 저장된 사본에서 요소를 리턴한다. 반복 가능한 요소가 모두 소모될 때까지 무한정 반복한다.")]),t._v(" "),r("h4",{attrs:{id:"cycle-을-활용한-예제"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cycle-을-활용한-예제"}},[t._v("#")]),t._v(" cycle()을 활용한 예제")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import itertools\n\nmylist = [1, 2, 3, 4]\nmylist1 = ['a', 'b', 'c', 'd', 'e', 'f']\n\nfor i, j in zip(itertools.cycle(mylist), mylist1):\n    print(i, j)\n    \n# 결과\n1 a\n2 b\n3 c\n4 d\n1 e\n2 f\n")])])]),r("ul",[r("li",[t._v("프로그래머스 - 모의고사")])]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"reference-additional-resources"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[t._v("#")]),t._v(" Reference & Additional Resources")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://medium.com/@hckcksrl/python-itertools-cycle-module-f53ba30949ed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python itertools.cycle 함수"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);