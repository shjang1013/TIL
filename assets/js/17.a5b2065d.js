(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{381:function(a,t,e){"use strict";e.r(t);var s=e(27),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"list2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list2"}},[a._v("#")]),a._v(" List2")]),a._v(" "),e("p",[e("em",[a._v("written by sohyeon")]),a._v("🍀")]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"_1-list2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-list2"}},[a._v("#")]),a._v(" 1. List2")]),a._v(" "),e("h3",{attrs:{id:"_2차원-list-구조"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2차원-list-구조"}},[a._v("#")]),a._v(" 2차원 List 구조")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 1차원 List를 묶어놓은 List\n2. 2차원 이상의 다차원 List는 차원에 따라 Index를 선언\n3. 2차원 List의 선언 : 세로길이(행의 개수), 가로길이(열의 개수)를 필요로 함\n")])])]),e("h3",{attrs:{id:"list-초기화"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-초기화"}},[a._v("#")]),a._v(" List 초기화")]),a._v(" "),e("h4",{attrs:{id:"ex-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제"}},[a._v("#")]),a._v(" ex) 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [0,0,0,0,0]  # 곱셈 연산을 통해 List 초기화\narr = [0] * 5      # [0,0,0,0,0]\narr = [i for i in range(2,9) if i%2==0] # [2,4,6,8]\n\nbrr = [[1,2,3],[1,2,3],[1,2,3]]\nbrr = [[1,2,3]] * 3\nbrr = [[i,j] for i in range(3) for j in range(2)] # [[0,0],[0,1],[1,0],[1,1],[2,0],[2,1]]\n")])])]),e("h3",{attrs:{id:"_2차원-list-입력-받기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2차원-list-입력-받기"}},[a._v("#")]),a._v(" 2차원 List 입력 받기")]),a._v(" "),e("ul",[e("li",[a._v("첫째 줄에 n행 m열")]),a._v(" "),e("li",[a._v("둘째 줄부터 n*m의 행렬 데이터가 주어질 경우 입력을 받는 방법")])]),a._v(" "),e("h4",{attrs:{id:"ex-예제1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제1"}},[a._v("#")]),a._v(" ex) 예제1")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("n, m = map(int, input().split())\n\nmylist = [0 for _ in range(n)] # mylist = [0] * n # 1차원 리스트를 만들어놓는다.\n\nfor i in range(n):\n    mylist[i] = list(map(int, input().split())) # 1차원 리스트에 각 원소에 입력받은 한 행의 데이터로 구성된 리스트를 저장한다.\n")])])]),e("h4",{attrs:{id:"ex-예제2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제2"}},[a._v("#")]),a._v(" ex) 예제2")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("n, m = map(int, input().split())\n\nmylist = []\n\nfor i in range(n):\n    mylist[i].append(list(map(int, input().split())))\n")])])]),e("h4",{attrs:{id:"ex-예제3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제3"}},[a._v("#")]),a._v(" ex) 예제3")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("n, m = map(int, input().split())\n\nmylist = [list(map(int, input().split())) for _ in range(n)]\n\n")])])]),e("h3",{attrs:{id:"_2차원-list에서-원하는-데이터의-위치-찾기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2차원-list에서-원하는-데이터의-위치-찾기"}},[a._v("#")]),a._v(" 2차원 List에서 원하는 데이터의 위치 찾기")]),a._v(" "),e("ul",[e("li",[a._v("1이 입력된 [행, 열]")])]),a._v(" "),e("h4",{attrs:{id:"ex-예제1-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-예제1-2"}},[a._v("#")]),a._v(" ex) 예제1")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("n, m = map(int, input().split())\n\nmylist = [list(map(int, input().split())) for _ in range(n)]\n\nnewlist = [(i,j) for i in range(n) for j in range(m) if mylist[i][j]==1]\n")])])]),e("h3",{attrs:{id:"list-순회"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-순회"}},[a._v("#")]),a._v(" List 순회")]),a._v(" "),e("p",[a._v("n x m List의 n*m 개의 모든 원소를 빠짐없이 조사하는 방법")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("행 우선 순회")]),e("br"),a._v("\nList의 행을 우선으로 List의 원소를 조사하는 방법")])]),a._v(" "),e("h4",{attrs:{id:"행-우선-순회-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#행-우선-순회-예제"}},[a._v("#")]),a._v(" 행 우선 순회 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [[0,1,2,3], [4,5,6,7], [8,9,10,11]]\n\nfor i in range(len(arr)): # 행의 좌표\n    for j in range(len(arr[i])): # 열의 좌표\n        print(arr[i][j], end=' ')\n")])])]),e("ul",[e("li",[e("strong",[a._v("열 우선 순회")]),e("br"),a._v("\nList의 열을 우선으로 List의 원소를 조사하는 방법")])]),a._v(" "),e("h4",{attrs:{id:"열-우선-순회-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#열-우선-순회-예제"}},[a._v("#")]),a._v(" 열 우선 순회 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [[0,1,2,3], [4,5,6,7], [8,9,10,11]]\n\nfor j in range(len(arr)):\n    for i in range(len(arr[i])):\n        print(arr[i][j], end=' ')\n")])])]),e("ul",[e("li",[e("strong",[a._v("지그재그 순회")]),e("br"),a._v("\nList의 행을 좌우로 조사하는 방법")])]),a._v(" "),e("h4",{attrs:{id:"지그재그-순회-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#지그재그-순회-예제"}},[a._v("#")]),a._v(" 지그재그 순회 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [[0,1,2,3], [4,5,6,7], [8,9,10,11]]\n\nn = len(arr)\nm = len(arr[0])\n\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j+(m-1-2*j)*(i%2)], end=' ')\n")])])]),e("h3",{attrs:{id:"델타를-이용한-2차-list-탐색"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#델타를-이용한-2차-list-탐색"}},[a._v("#")]),a._v(" 델타를 이용한 2차 List 탐색")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 2차 List의 한 좌표에서 네 방향의 인접 List 요소를 탐색할 때 사용하는 방법\n2. 델타 값은 한 좌표에서 네 방향의 좌표와 x, y의 차이를 저장한 List로 구현\n3. 델타 값을 이용하여 특정 언소의 상하좌우에 위치한 원소에 접근할 수 있음\n4. 이차원 List의 가장자리 원소들은 상하좌우 네 방향에 원소가 존재하지 않을 경우가 있으므로, Index를 체크하거나 Index의 범위를 제한해야 함\n")])])]),e("h4",{attrs:{id:"델타를-이용한-2차-list-탐색-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#델타를-이용한-2차-list-탐색-예제"}},[a._v("#")]),a._v(" 델타를 이용한 2차 List 탐색 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# arr[0...n-1][0...n-1] : 2차원 List\ndx = [0, 0, -1, 1] # 상하좌우\ndy = [-1, 1, 0, 0]\n\nfor x in range(len(arr)):\n    for y in range(len(arr[x])):\n        for i in range(4):\n            testX = x + dx[i]\n            testY = y + dy[i]\n            print(arr[testX][testY])\n")])])]),e("h3",{attrs:{id:"전치행렬"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#전치행렬"}},[a._v("#")]),a._v(" 전치행렬")]),a._v(" "),e("p",[a._v("행과 열의 값이 반대인 행렬을 의미")]),a._v(" "),e("h4",{attrs:{id:"전치행렬-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#전치행렬-예제"}},[a._v("#")]),a._v(" 전치행렬 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [[1,2,3],[4,5,6],[7,8,9]] # 3*3 행렬\n\nfor i in range(3):\n    for j in range(3):\n        if i < j:\n            arr[i][j], arr[j][i] = arr[j][i], arr[i][j]\n")])])]),e("h3",{attrs:{id:"zip-iterable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zip-iterable"}},[a._v("#")]),a._v(" zip(iterable*)")]),a._v(" "),e("p",[a._v("동일한 개수로 이루어진 자료형들을 묶어 주는 역할을 하는 함수")]),a._v(" "),e("h4",{attrs:{id:"zip-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zip-예제"}},[a._v("#")]),a._v(" zip 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("alpha = ['a','b','c']\nindex = [1,2,3]\nalpha_index = list(zip(alpha, index))\nprint(alpha_index) # [('a',1),('b',2),('c',3)]\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr = [[1,2,3],[4,5,6],[7,8,9]]\nprint(list(zip(*arr))) # [(1,4,7),(2,5,8),(3,6,9)]\n")])])]),e("br"),a._v(" "),e("h2",{attrs:{id:"_2-부분-집합"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-부분-집합"}},[a._v("#")]),a._v(" 2. 부분 집합")]),a._v(" "),e("h3",{attrs:{id:"부분-집합의-합-문제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#부분-집합의-합-문제"}},[a._v("#")]),a._v(" 부분 집합의 합 문제")]),a._v(" "),e("p",[a._v("유한 개의 정수로 이루어진 집합이 있을 때, 이 집합의 부분 집합 중에서 그 집합의 원소를 모두 더한 값이 0이 되는 경우가 있는지를 알아내는 문제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 완전 검색기법으로 부분 집합 합 문제를 풀기 위해서는 우선 집합의 모든 부분 집합을 생성한 후 각 부분 집합의 합을 계산함\n2. 주어진 집합의 부분 집합을 생성하는 방법 생각해 보기\n")])])]),e("h3",{attrs:{id:"부분-집합의-수"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#부분-집합의-수"}},[a._v("#")]),a._v(" 부분 집합의 수")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Q. 어떤 집합의 부분 집합을 구할 경우 부분 집합의 총 개수가 몇 개일까요?\nA. 1. 집합의 원소가 n개일 때, 공집합을 포함한 부분 집합의 수는 2^n개\n   2. 각 원소를 부분 집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든 원소에 적용한 경우의 수와 같음\n")])])]),e("h4",{attrs:{id:"loop를-이용하여-확안하고-부분-집합을-생성하는-방법의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loop를-이용하여-확안하고-부분-집합을-생성하는-방법의-예제"}},[a._v("#")]),a._v(" Loop를 이용하여 확안하고, 부분 집합을 생성하는 방법의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("bit = [0,0,0,0]\nfor i in range(2):\n    bit[0] = i                 # 0번째 원소\n    for j in range(2):\n        bit[1] = j             # 1번째 원소\n        for k in range(2):\n            bit[2] = k         # 2번째 원소\n            for l in range(2):\n                bit[3] = l     # 3번째 원소\n                print(bit)     # 생성된 부분집합을 출력\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("비트 List가 [0,0,0,0] 일 경우 { }\n비트 List가 [0,0,0,1] 일 경우 { 4 }\n...\n...\n비트 List가 [1,1,1,1]일 경우 { 1, 2, 3, 4 } 출력\n")])])]),e("ul",[e("li",[e("p",[e("strong",[a._v("비트 List")]),e("br"),a._v("\n대상 List의 각 원소를 포함할지 말지를 정하는 List")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("비트 연산자")]),e("br"),a._v("\n0과 1로 이루어진 이진수에 대한 연산을 수행하는 연산자")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("비트연산자")]),a._v("의 종류는 "),e("code",[a._v("&, |, <<, >>")]),a._v(" 등이 있다.")]),a._v(" "),e("li",[e("code",[a._v("&")]),a._v("는 비트 단위로 AND 연산을 하고, "),e("code",[a._v("|")]),a._v("는 비트 단위로 OR 연산을 한다.")]),a._v(" "),e("li",[e("code",[a._v("<<")]),a._v("는 피연산자의 비트 열을 왼쪽으로 이동시키고, 마지막으로 "),e("code",[a._v(">>")]),a._v("는 피연산자의 비트 열을 오른쪽으로 이동시킨다.")])])])]),a._v(" "),e("h4",{attrs:{id:"보다-간결하게-부분-집합을-생성하는-방법의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#보다-간결하게-부분-집합을-생성하는-방법의-예제"}},[a._v("#")]),a._v(" 보다 간결하게 부분 집합을 생성하는 방법의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('arr = [3,6,7,1,5,4]\nn = len(arr) # n : 원소의 개수\n\nfor i in range(1<<n):   # 1<<n : 부분 집합의 개수  64\n    for j in range(n):  # 원소의 수만큼 비트를 비교함  6\n        if i & (1<<j):  # i의 j번째 비트가 1이면 j번째 원소 출력  \n            print(arr[j], end=",")\n    print()\n')])])]),e("br"),a._v(" "),e("h2",{attrs:{id:"_3-검색"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-검색"}},[a._v("#")]),a._v(" 3. 검색")]),a._v(" "),e("p",[a._v("저장되어 있는 있는 자료 중에서 "),e("code",[a._v("원하는 항목(목적하는 탐색키를 가진 항목)")]),a._v("을 찾는 작업")]),a._v(" "),e("h3",{attrs:{id:"순차-검색-sequential-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#순차-검색-sequential-search"}},[a._v("#")]),a._v(" 순차 검색(Sequential Search)")]),a._v(" "),e("ul",[e("li",[a._v("일렬로 되어 있는 자료를 순서대로 검색하는 방법")]),a._v(" "),e("li",[a._v("List나 연결 List 등 순차구조로 구현된 자료구조에서 유용함")]),a._v(" "),e("li",[a._v("구현이 쉽지만, 검색 대상이 많은 경우 수행시간의 증가로 비효율적임")]),a._v(" "),e("li",[a._v("2가지 경우가 있음\n"),e("ul",[e("li",[a._v("정렬된 경우")]),a._v(" "),e("li",[a._v("정렬되지 않은 경우")])])])]),a._v(" "),e("h3",{attrs:{id:"정렬되지-않는-자료의-검색-과정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정렬되지-않는-자료의-검색-과정"}},[a._v("#")]),a._v(" 정렬되지 않는 자료의 검색 과정")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 첫번째 원소부터 순서대로 검색대상과 키 값이 같은 원소가 있는지를 비교하여 찾음\n2. 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환\n3. 자료구조의 마지막에 갈 때까지 검색 대상을 찾지 못하면 검색 실패\n")])])]),e("ul",[e("li",[a._v("첫 번째 원소를 찾을 때에는 1번 비교, 두 번째 원소를 찾을 때에는 2번 비교")]),a._v(" "),e("li",[e("code",[a._v("정렬되지 않은 자료")]),a._v("에서의 순차검색의 평균 비교 횟수\n"),e("ul",[e("li",[a._v("1/n * (1+2+...+n) = (n+1)/2")])])]),a._v(" "),e("li",[a._v("시간 복잡도 : "),e("code",[a._v("O(n)")])])]),a._v(" "),e("h4",{attrs:{id:"정렬되지-않는-자료의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정렬되지-않는-자료의-예제"}},[a._v("#")]),a._v(" 정렬되지 않는 자료의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def sequentialSearch(a,n,key):\n    i = 0\n    while i < n and a[i] != key:\n        i = i + 1\n    \n    if i < n: \n        return i\n    else: \n        return -1\n")])])]),e("h3",{attrs:{id:"정렬된-자료의-검색-과정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정렬된-자료의-검색-과정"}},[a._v("#")]),a._v(" 정렬된 자료의 검색 과정")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 자료가 오름차순으로 정렬된 상태에서 검색을 실시한다고 가정\n2. 자료를 순차적으로 검색하면서 키 값을 비교함\n3. 원소의 키 값이 검색 대상의 키 값보다 크면 원소가 없다는 것이므로 더 이상 검색하지 않고 검색을 종료함\n")])])]),e("ul",[e("li",[a._v("정렬되어 있으므로 검색 실패를 반환하는 경우 평균 비교 횟수가 반으로 줄어듦")]),a._v(" "),e("li",[a._v("시간 복잡도 : "),e("code",[a._v("O(n)")])])]),a._v(" "),e("h4",{attrs:{id:"정렬된-자료의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#정렬된-자료의-예제"}},[a._v("#")]),a._v(" 정렬된 자료의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def sequentialSearch(a,n,key):\n    i = 0\n    while i < n and a[i] < key:\n        i = i + 1\n    \n    if i < n and a[i] == key:\n        return i\n    else:\n        return -1\n")])])]),e("h3",{attrs:{id:"이진-검색-binary-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#이진-검색-binary-search"}},[a._v("#")]),a._v(" 이진 검색(Binary Search)")]),a._v(" "),e("ul",[e("li",[a._v("순차 검색보다 효율적인 검색 방법")]),a._v(" "),e("li",[a._v("자료의 가운데 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속하는 방법\n"),e("ul",[e("li",[a._v("목적 키를 찾을 때까지 이진 검색을 순환적으로 반복 수행함으로써 "),e("code",[a._v("검색 범위를 반으로 줄여가면서 빠르게 검색")]),a._v("을 수행함")])])]),a._v(" "),e("li",[a._v("이진 검색을 하기 위해서는 "),e("code",[a._v("자료가 정렬된 상태")]),a._v("여야 함")]),a._v(" "),e("li",[a._v("정렬된 데이터 n개가 있는 경우의 시간복잡도\n"),e("ul",[e("li",[a._v("순차 검색 시 O(N)의 시간이 걸리지만, 이진 검색 시 "),e("code",[a._v("O(logN)")]),a._v("의 시간이 걸림")])])])]),a._v(" "),e("h3",{attrs:{id:"이진-검색의-검색-과정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#이진-검색의-검색-과정"}},[a._v("#")]),a._v(" 이진 검색의 검색 과정")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 자료의 중앙에 있는 원소를 선택\n2. 중앙 원소의 값과 찾고자 하는 목표 값을 비교\n3. 목표값 < 중앙 원소 값 : 자료의 왼쪽 반에 대해서 새로 검색을 수행\n   목표값 > 중앙 원소 값: 자료의 오른쪽 반에 대해서 새로 검색을 수행\n4. 찾고자 하는 값을 찾을 때까지 [1~3]의 과정을 반복\n")])])]),e("ul",[e("li",[a._v("검색 범위의 "),e("code",[a._v("시작점과 종료점을 이용하여 검색을 반복 수행")]),a._v("함")]),a._v(" "),e("li",[a._v("이진 검색의 경우, 자료에 삽입이나 삭제가 발생하였을 때 "),e("code",[a._v("List의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요함")])])]),a._v(" "),e("h4",{attrs:{id:"이진-검색의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#이진-검색의-예제"}},[a._v("#")]),a._v(" 이진 검색의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def binarySearch(a, key):\n    start = 0\n    end = len(a)-1\n    while start <= end:\n        middle = start + (end - start)//2\n        if key == a[middle]: # 검색 성공\n            return True\n        elif key < a[middle]:\n            end = middle-1\n        else:\n            start = middle+1\n    return False # 검색 실패 \n")])])]),e("h4",{attrs:{id:"재귀-함수를-이용한-이진-검색의-예제"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#재귀-함수를-이용한-이진-검색의-예제"}},[a._v("#")]),a._v(" 재귀 함수를 이용한 이진 검색의 예제")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def binarySearch(a, low, high, key):\n    if low > high: # 검색 실패\n        return False\n    else:\n        middle = (low + high)//2\n        if key == a[middle]: # 검색 성공\n            return True\n        elif key < a[middle]:\n            return binarySearch(a, low, middle-1, key)\n        elif a[middle] < key:\n            return binarySearch(a, middle+1, high, key)\n")])])]),e("h3",{attrs:{id:"인덱스-indexing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#인덱스-indexing"}},[a._v("#")]),a._v(" 인덱스(Indexing)")]),a._v(" "),e("ul",[e("li",[a._v("데이터베이스(Database)에서 유래, 테이블에 대한 동작 속도를 높임")]),a._v(" "),e("li",[a._v("룩 업 테이블(Look up table) 등의 용어로 사용함")]),a._v(" "),e("li",[a._v("인덱스를 저장하는데 필요한 디스크 공간은 보통 테이블 저장에 필요한 디스크 공간보다 작음\n"),e("ul",[e("li",[a._v("인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목은 갖고 있지 않음")])])]),a._v(" "),e("li",[a._v("List를 사용한 인덱스\n"),e("ul",[e("li",[a._v("대량의 데이터를 매번 정렬하면, 프로그램의 반응은 느려질 수 밖에 없음")]),a._v(" "),e("li",[a._v("이신림고등학교러한 대량 데이터의 성능 저하 문제를 해결하기 위해 List 인덱스를 사용할 수 있음")]),a._v(" "),e("li",[a._v("원본 데이터에 데이터가 삽입될 경우 "),e("code",[a._v("상대적으로 크기가 작은 인덱스 List")]),a._v("를 정렬하기 때문에 속도가 빠름")])])])]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"_4-정렬"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-정렬"}},[a._v("#")]),a._v(" 4. 정렬")]),a._v(" "),e("h3",{attrs:{id:"셀렉션-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#셀렉션-알고리즘"}},[a._v("#")]),a._v(" 셀렉션 알고리즘")]),a._v(" "),e("ul",[e("li",[a._v("저장되어 있는 자료로부터 k번째로 큰 혹은 작은 원소를 찾는 방법")]),a._v(" "),e("li",[a._v("최소값, 최대값 혹은 중간값을 찾는 알고리즘을 의미하기도 함")])]),a._v(" "),e("h3",{attrs:{id:"셀렉션-선택-과정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#셀렉션-선택-과정"}},[a._v("#")]),a._v(" 셀렉션 선택 과정")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 정렬 알고리즘을 이용하여 자료를 정렬\n2. 원하는 순서에 있는 원소 가져오기\n")])])]),e("h4",{attrs:{id:"ex-k번째로-작은-원소를-찾는-알고리즘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ex-k번째로-작은-원소를-찾는-알고리즘"}},[a._v("#")]),a._v(" ex) k번째로 작은 원소를 찾는 알고리즘")]),a._v(" "),e("ul",[e("li",[a._v("1번부터 k번째까지 작은 원소들을 찾아 List의 앞쪽으로 이동시키고, List의 k번째를 반환")]),a._v(" "),e("li",[a._v("k가 비교적 작을 때 유용하며 "),e("code",[a._v("O(kn)")]),a._v("의 수행시간을 필요로 함")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def select(list, k):\n    for i in range(0,k):\n        minIndex = i\n        for j in range(i+1, len(list)):\n            if list[minIndex] > list[j]:\n                minIndex = j\n        list[i], list[minIndex] = list[minIndex], list[i]\n    return list[k-1]\n")])])]),e("h3",{attrs:{id:"선택-정렬"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#선택-정렬"}},[a._v("#")]),a._v(" 선택 정렬")]),a._v(" "),e("ul",[e("li",[a._v("주어진 자료들 중 "),e("code",[a._v("가장 작은 값의 원소부터 차례대로")]),a._v(" 선택하여 위치를 교환하는 방식")]),a._v(" "),e("li",[a._v("셀렉션 알고리즘을 전체 자료에 적용한 것.")])]),a._v(" "),e("h3",{attrs:{id:"선택-정렬-과정-시간-복잡도-o-n-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#선택-정렬-과정-시간-복잡도-o-n-2"}},[a._v("#")]),a._v(" 선택 정렬 과정 "),e("code",[a._v("시간 복잡도 = O(n^2)")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1. 주어진 List 중에서 최소값을 찾음\n2. 그 값을 List의 맨 앞에 위치한 값과 교환\n3. 맨 처음 위치를 제외한 나머지 List를 대상으로 위의 과정을 반복\n")])])]),e("p",[a._v("선택 정렬의 시간 복잡도 = "),e("code",[a._v("O(n^2)")])]),a._v(" "),e("h3",{attrs:{id:"선택-정렬의-특성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#선택-정렬의-특성"}},[a._v("#")]),a._v(" 선택 정렬의 특성")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[a._v("알고리즘")]),a._v(" "),e("th",{staticStyle:{"text-align":"center"}},[a._v("평균 수행시간")]),a._v(" "),e("th",{staticStyle:{"text-align":"center"}},[a._v("최악 수행시간")]),a._v(" "),e("th",{staticStyle:{"text-align":"center"}},[a._v("알고리즘 기법")]),a._v(" "),e("th",{staticStyle:{"text-align":"center"}},[a._v("비고")])])]),a._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[a._v("선택 정렬")]),a._v(" "),e("td",{staticStyle:{"text-align":"center"}},[a._v("O(n^2)")]),a._v(" "),e("td",{staticStyle:{"text-align":"center"}},[a._v("O(n^2)")]),a._v(" "),e("td",{staticStyle:{"text-align":"center"}},[a._v("비교와 교환")]),a._v(" "),e("td",{staticStyle:{"text-align":"center"}},[a._v("교환의 횟수가 버블, 삽입정렬보다 작음")])])])]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"reference-additional-resources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-additional-resources"}},[a._v("#")]),a._v(" Reference & Additional Resources")]),a._v(" "),e("blockquote",[e("p",[a._v("SW Expert Academy")])])])}),[],!1,null,null,null);t.default=r.exports}}]);